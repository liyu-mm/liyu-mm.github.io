<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么是宏任务和微任务</title>
      <link href="/archives/5.html"/>
      <url>/archives/5.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是宏任务和微任务"><a href="#1-什么是宏任务和微任务" class="headerlink" title="1. 什么是宏任务和微任务"></a><strong>1. 什么是宏任务和微任务</strong></h3><p>JavaScript 把异步任务又做了进一步的划分，<strong>异步任务又分为两类</strong>，分别是：</p><p>① <strong>宏任务（macrotask）：</strong></p><ul><li>异步 Ajax 请求、</li><li>setTimeout、setInterval、</li><li>文件操作</li><li>其它宏任务</li></ul><p>② <strong>微任务（microtask）：</strong></p><ul><li>Promise.then、.catch 和 .finally</li><li>process.nextTick</li><li>其它微任务</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/27828718-c16b4dc2175283ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/869/format/webp" alt="img"></p><h3 id="2-宏任务和微任务的执行顺序"><a href="#2-宏任务和微任务的执行顺序" class="headerlink" title="2. 宏任务和微任务的执行顺序"></a><strong>2. 宏任务和微任务的执行顺序</strong></h3><p><img src="https://upload-images.jianshu.io/upload_images/27828718-8806d69764fb5f1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1005/format/webp" alt="img"></p><ul><li>每一个宏任务执行完之后，都会检查<strong>是否存在待执行的微任务</strong>，</li><li>如果有，则执行完所有微任务之后，再继续执行下一个宏任务。</li></ul><h3 id="3-去银行办业务的场景（模拟任务场景）"><a href="#3-去银行办业务的场景（模拟任务场景）" class="headerlink" title="3. 去银行办业务的场景（模拟任务场景）"></a>3. 去银行办业务的场景（模拟任务场景）</h3><p>① 小云和小腾去银行办业务。首先，需要取号之后进行排队<br> ⚫   宏任务队列<br> ② 假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待<br> ⚫   单线程，宏任务按次序执行<br> ③ 小云办完存款业务后，柜员询问他是否还想办理其它业务？<br> ⚫   当前宏任务执行完，检查是否有微任务<br> ④ 小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？<br> ⚫   执行微任务，后续宏任务被推迟<br> ⑤ 小云离开柜台后，柜员开始为小腾办理业务<br> ⚫   所有微任务执行完毕，开始执行下一个宏任务</p><h3 id="4-分析以下代码输出的顺序"><a href="#4-分析以下代码输出的顺序" class="headerlink" title="4. 分析以下代码输出的顺序"></a>4. 分析以下代码输出的顺序</h3><p><img src="https://upload-images.jianshu.io/upload_images/27828718-4066010dbc8e3fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/972/format/webp" alt="img"></p><h3 id="5-经典面试题"><a href="#5-经典面试题" class="headerlink" title="5. 经典面试题"></a>5. 经典面试题</h3><p><strong>请分析以下代码输出的顺序（代码较长，截取成了左中右 3 个部分） ：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/27828718-c49f11bdbe15a794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs一点通</title>
      <link href="/archives/3c043726.html"/>
      <url>/archives/3c043726.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nodejs一点通"><a href="#Nodejs一点通" class="headerlink" title="Nodejs一点通"></a>Nodejs一点通</h2><p> <em>javascript</em> <em>Node</em></p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>属于后端语言，和前端的JavaScript相似</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>我们需要使用一个node的内置模块进行文件操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入内置模块  用于文件操作const fs = require(&#x27;fs&#x27;)// 读取文件fs.readFile(&#x27;./file/1.txt&#x27;, &#x27;utf-8&#x27;, function (err, data) &#123;    // err  文件读取错误的信息    // data  文件读取成功后的文件内容    if (err)&#123;        // 文件读取成功        console.log(err.message) // 错误信息        return    &#125;    // 文件读取成功    console.log(&#x27;data&#x27;, data) // 文件的内容&#125;)</span><br></pre></td></tr></table></figure><p>读取失败，data的值为undefined</p><p>读取成功，err的值为null</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)// 写入文件fs.writeFile(&#x27;./file/2.txt&#x27;, &#x27;hello 枫枫&#x27;, &#x27;utf-8&#x27;, function (err)&#123;    console.log(&#x27;err&#x27;, err)&#125;)</span><br></pre></td></tr></table></figure><p>参数 依次为 路径 写入的内容 编码格式 失败的回调（也可以理解为写入之后的回调）</p><h2 id="关于路径的问题"><a href="#关于路径的问题" class="headerlink" title="关于路径的问题"></a>关于路径的问题</h2><p>一般来说，我们会直接使用相对路径</p><p>例如 ‘<code>./file/test.txt</code>’</p><p>这句话的意思就是当前文件同级目录下的file目录下的test文件</p><p>如果你是直接运行js文件或者在js的同级目录运行js，这倒没什么问题</p><p><img src="http://python.fengfengzhidao.com/1031/20211224210924.png" alt="img"></p><p>如果你不是在当前目录运行，那么就会找不到这个文件</p><p><img src="http://python.fengfengzhidao.com/1031/20211224211042.png" alt="img"></p><p>所以我们就需要解决这种问题，让我们写好的代码，让使用者怎么运行都没问题</p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>最开始的想法，就可以使用它的绝对位置，也就是这个文件在电脑上的存储位置</p><p>在G盘的某个文件夹下的某个位置</p><p>以盘符开头的路径，这就是绝对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 使用绝对路径读取一个文件const fs = require(&#x27;fs&#x27;)// 如果是相对路径，在其他路径执行js文件就会报错// 例如 node test/file.js// 读取文件  绝对路径fs.readFile(&#x27;G:\\IT\\node项目\\test_node\\file\\student.txt&#x27;, &#x27;utf-8&#x27;, function (err, data) &#123;    if (err)&#123;        // 文件读取成功        console.log(err.message) // 错误信息        return    &#125;    // 文件读取成功    console.log(&#x27;data&#x27;, data) // 文件的内容&#125;)</span><br></pre></td></tr></table></figure><p>这样你去任何地方运行这个js文件，都不会报错，但无疑使代码变得冗余</p><p>所以就诞生了路径拼接</p><h3 id="路径拼接"><a href="#路径拼接" class="headerlink" title="路径拼接"></a>路径拼接</h3><p>我们需要记住一个内置变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 当前文件所处的目录  G:\IT\node项目\test_node\文件操作console.log(__dirname)// 当前文件的路径   G:\IT\node项目\test_node\文件操作\文件路径问题.jsconsole.log(__filename)</span><br></pre></td></tr></table></figure><p><code>__dirname</code>是获取当前文件的</p><p>那么我们就可以使用 <code>__dirname</code> 代替绝对路径中很长的前缀了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)// 读取文件  路径拼接fs.readFile(__dirname + &#x27;/file/student.txt&#x27;, &#x27;utf-8&#x27;, function (err, data) &#123;    if (err)&#123;        // 文件读取成功        console.log(err.message) // 错误信息        return    &#125;    // 文件读取成功    console.log(&#x27;data&#x27;, data) // 文件的内容&#125;)</span><br></pre></td></tr></table></figure><p>这样没问题了，但是作为程序员，我更希望拼接路径这种粗活应该交给计算机，所以我们希望能有一个函数或者模块可以帮助我们完成路径拼接</p><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><p>主要使用它的join方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入path内置模块const path = require(&#x27;path&#x27;)// 路径拼接let entire_path = path.join(&#x27;new_path&#x27;, &#x27;new&#x27;, &#x27;文件夹&#x27;)console.log(entire_path)  // new_path\new\文件夹// 结合__dirnameconsole.log(path.join(__dirname, &#x27;new_path&#x27;, &#x27;new&#x27;, &#x27;文件夹&#x27;))  //G:\IT\node项目\test_node\文件操作\new_path\new\文件夹// 获取完整文件名let file = &#x27;/file/student.txt&#x27;let fullName = path.basename(file)console.log(fullName)  // student.txt// 获取文件名let widthName = path.basename(file, &#x27;.txt&#x27;)console.log(widthName)  // student</span><br></pre></td></tr></table></figure><p>join中不仅可以写单个元素，也可以写路径表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)let entire_path = path.join(&#x27;new_path&#x27;, &#x27;new&#x27;, &#x27;../文件夹&#x27;)console.log(entire_path)  // new_path\文件夹</span><br></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>其实正则表达式是一个非常重要的知识点，我把它放在这里，因为待会我们要做一个小案例</p><p>基础暂且略过，直接上代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg_str = `&lt;meta charset=&quot;GB2312&quot;&gt;&lt;style&gt;    .box&#123;        margin: 20px 0.025rem 20px;    &#125;&lt;/style&gt;&lt;title&gt;枫枫知道&lt;/title&gt;`// 正则规则 使用 / / 包裹// 匹配css 标签中的内容let reg = /&lt;style[\s\S]*&gt;([\s\S]*)&lt;\/style&gt;/res = reg.exec(reg_str)console.log(res[1])</span><br></pre></td></tr></table></figure><p>在这里我要匹配<code>style</code>标签中的代码，但是呢，我只要style中的内容，style这个标签本身我是不要的</p><p>那么我们可以使用分组的方式，将中间那部分匹配的内容放到一个分组中</p><p>如果你要获取全部匹配的内容</p><p>那么你就可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(res[0])</span><br></pre></td></tr></table></figure><p>那么表达式写完之后就应该匹配了</p><p>我们使用exec(data)方法在data中进行查找</p><p>这样我们就可以得到内容了</p><p>当然正则表达式的内容比较多，并且每种语言对于正则表达式都有不同的写法，这里暂且留个坑</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>现在有一个index.html文件，这个文件中有style标签，有script标签，并且这些都写在了一个文件中</p><p>我们需要对它进行拆分</p><p>使用我们的node.js对它进行拆分，并将这些代码片段放入不同的文件</p><p>思路分析</p><ol><li>读取index.html文件</li><li>筛选index文件中style中的代码，并将它提取出来，写入到一个新的文件中 index.css</li><li>筛选index文件中script中的代码，并将它提取出来，写入到一个新的文件中 index.js</li><li>将index.html中的style替换为<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;</code></li><li>将index.html中的script替换为<code>&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</code></li></ol><p>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="http操作"><a href="#http操作" class="headerlink" title="http操作"></a>http操作</h1><p>web服务的根基，根据不同的响应得到不同到内容</p><p>鉴于大家都是有基础的，http和web服务便不再展开叙述</p><p>我们这里就直接分析，在node中如何实现一个web服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 引入http这个内置模块const http = require(&#x27;http&#x27;)// 创建web服务器实例const server = http.createServer()// 为服务器绑定request事件，监听客户端请求server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;    console.log(&#x27;some visit our web server&#x27;)    // req是请求对象    console.log(req.url, req.method)  // / GET    // res 是响应对象    // 向客户端响应内容    let str = `    &lt;h2&gt;Node.js web服务器&lt;/h2&gt;    &lt;p&gt;你请求的路径是：$&#123;req.url&#125;， 请求的方法是：$&#123;req.method&#125;&lt;/p&gt;    &lt;p&gt;枫枫知道 &lt;a href=&quot;http://www.fengfengzhidao.com&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;    `    // 解决中文乱码问题    res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;)    res.end(str)&#125;)// 启动服务器server.listen(80, function () &#123;    console.log(&#x27;server running at http://127.0.0.1&#x27;)&#125;)</span><br></pre></td></tr></table></figure><p>需要特别注意的几个方法</p><blockquote><p><code>(req, res)</code> 第一个是请求对象，第二个是响应对象，什么名字无所谓，只要是这个位置对应上了<br>我比较喜欢使用 request做请求对象，response做响应对象</p></blockquote><p>获取请求路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.url  // 这个路径都是以 / 开头// 例如  / 、 /index 、  /about、</span><br></pre></td></tr></table></figure><p>获取请求方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.method  // 浏览器发请求都是默认GET方式</span><br></pre></td></tr></table></figure><p>设置请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;)  // 如果没有这个，那么如果响应了中文 就会出现乱码</span><br></pre></td></tr></table></figure><p>第一个参数是请求头的名字，第二个是请求头键对应的值</p><p>响应结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.end(str)// 可以直接写一个字符串// 还可以是标签字符串，这里的东西玩法比较多</span><br></pre></td></tr></table></figure><h2 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h2><p>所谓路由分发，就是根据请求路径的不同响应不同的结果</p><p>实现的思路有很多，这里我们一一进行讲解</p><h3 id="loser版本"><a href="#loser版本" class="headerlink" title="loser版本"></a>loser版本</h3><p>接收请求的url，根据url的不同，判断我要去哪个分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;)// 创建web服务器实例const server = http.createServer()// 为服务器绑定request事件，监听客户端请求server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;    console.log(&#x27;some visit our web server&#x27;, req.url)    res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;)    const url = req.url;  // 请求路径    let data;  // 定义要返回的值    // req是请求对象    if (url === &#x27;/&#x27; || url === &#x27;/index&#x27;) &#123;        data = `            &lt;h2&gt;Node.js web服务器&lt;/h2&gt;            &lt;p&gt;你请求的路径是：$&#123;req.url&#125;， 请求的方法是：$&#123;req.method&#125;&lt;/p&gt;            &lt;p&gt;枫枫知道 &lt;a href=&quot;http://www.fengfengzhidao.com&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;            `    &#125;else if (url === &#x27;/about&#x27;)&#123;        data = &#x27;&lt;h1&gt;about&lt;/h1&gt;&#x27;    &#125;else &#123;        data = &#x27;&lt;h1&gt;404 NotFound&lt;/h1&gt;&#x27;    &#125;    res.end(data)  // 响应数据&#125;)// 启动服务器server.listen(80, function () &#123;    console.log(&#x27;server running at http://127.0.0.1&#x27;)&#125;)</span><br></pre></td></tr></table></figure><p>这么做，如果只有一两个路径这都还好，如果路径多了岂不是一路下来全是if判断，所以得想想新的办法</p><p>注意，每次修改了代码都需要手动重启项目</p><h3 id="map映射—对象"><a href="#map映射—对象" class="headerlink" title="map映射—对象"></a>map映射—对象</h3><p>这个东西类似于python中的字典，字典有一个get方法，但是js不太一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let map_dic = &#123;    &#x27;/index&#x27;: function index()&#123;        return &#x27;index&#x27;    &#125;,    &#x27;/about&#x27;: function about()&#123;        return &#x27;about&#x27;    &#125;&#125;let url = &#x27;/index&#x27;;  // 用户请求的路径let data;  // 要响应的数据const fun = map_dic[url]// 如果匹配不上就是 undefinedif (fun)&#123;    // 匹配上了    data = fun()&#125;else &#123;    // 没有匹配上    data = &#x27;&lt;h1&gt;404 NotFound&lt;/h1&gt;&#x27;&#125;console.log(data)</span><br></pre></td></tr></table></figure><p>当然我们也可以将函数单独写在一起</p><p>那么在对应的值上就只需要写上对应的函数名即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function index() &#123;    return &#x27;index&#x27;&#125;function about() &#123;    return &#x27;about&#x27;&#125;// 版本二let map_dic = &#123;    &#x27;/index&#x27;: index,    &#x27;/about&#x27;: about,&#125;let url = &#x27;/index&#x27;;  // 用户请求的路径let data;  // 要响应的数据const fun = map_dic[url]// 如果匹配不上就是 undefinedif (fun) &#123;    // 匹配上了    data = fun()&#125; else &#123;    // 没有匹配上    data = &#x27;&lt;h1&gt;404 NotFound&lt;/h1&gt;&#x27;&#125;console.log(data)</span><br></pre></td></tr></table></figure><p>把这里掌握好之后，后面使用node进行web开发就会得心应手</p><h3 id="map映射—数组"><a href="#map映射—数组" class="headerlink" title="map映射—数组"></a>map映射—数组</h3><p>一般来说，路径的映射不是对象类型，而是数组类型，因为数组有顺序，并且数组有一个map方法，这个才是主流路由分发的头牌</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function path(_path, patten)&#123;    /* _path  请求路径       patten  去执行的方法     */    return [_path, patten]&#125;// ------let index = ()=&gt;&#123;    return &#x27;&lt;h1&gt;index&lt;/h1&gt;&#x27;&#125;let about = ()=&gt;&#123;    return &#x27;&lt;h1&gt;about&lt;/h1&gt;&#x27;&#125;let home = ()=&gt;&#123;    return &#x27;&lt;h1&gt;home&lt;/h1&gt;&#x27;&#125;let notFound = ()=&gt;&#123;    return &#x27;&lt;h1&gt;404 NotFound&lt;/h1&gt;&#x27;&#125;let mapArray = [    path(&#x27;/index&#x27;, index),    path(&#x27;/about&#x27;, about),    path(&#x27;/home&#x27;, home),]let url = &#x27;/about&#x27;;  // 请求路径let data;  // 要响应的数据let flag = false  // 是否已经匹配mapArray.map((item)=&gt;&#123;    if (url === item[0])&#123;        // 匹配上了，后面的就不用走了        data = item[1]()  // 执行对应的函数        flag = true  // 表示已经匹配了    &#125;&#125;)if (!flag)&#123;    data = notFound()&#125;console.log(data)</span><br></pre></td></tr></table></figure><p>当然，还得支持正则匹配，总之他们的核心思想也就和这个类似，大家把这个的实现思路好好走一遍</p><h1 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h1><p>node中的模块主要分为三种</p><ul><li>内置模块</li><li>用户自定义模块</li><li>第三方模块（包）</li></ul><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>假设现在有一个m1.js文件，里面写了很多代码</p><p>我需要在m2.js中执行这个m1.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// m1.jsconsole.log(&#x27;用户自定义的模块&#x27;)console.log(&#x27;有很多内容&#x27;)console.log(&#x27;非常多的代码&#x27;)console.log(&#x27;...&#x27;)</span><br><span class="line">// m2.jsconst m1 = require(&#x27;./m1.js&#x27;)  // 加载用户自定义模块console.log(m1)  // 空对象</span><br></pre></td></tr></table></figure><p>执行m2文件，可以看到是执行了m1.js中的代码，并且给我返回了一个空对象</p><p><img src="http://python.fengfengzhidao.com/1031/20211225123213.png" alt="img"></p><h3 id="读取json文件"><a href="#读取json文件" class="headerlink" title="读取json文件"></a>读取json文件</h3><p>如果你有一个json文件，那么你使用这个方法可以直接读取json文件的内容，并且自动转换为js中的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const m2 = require(&#x27;./new_.json&#x27;)  // 加载json文件console.log(m2)  // 直接就是对象</span><br></pre></td></tr></table></figure><p>注意哦，不能用这个方法去读取普通的文件，这是会报错的！</p><h3 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h3><p>现在我们来看看m1.js给我们返回的空对象</p><p>在每个js文件中，都有一个module对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(module)/*Module &#123;  id: &#x27;.&#x27;,  path: &#x27;G:\\IT\\node项目\\test_node\\模块操作&#x27;,  exports: &#123;&#125;,  parent: null,  filename: &#x27;G:\\IT\\node项目\\test_node\\模块操作\\2.module对象.js&#x27;,  loaded: false,  children: [],  paths: [    &#x27;G:\\IT\\node项目\\test_node\\模块操作\\node_modules&#x27;,    &#x27;G:\\IT\\node项目\\test_node\\node_modules&#x27;,    &#x27;G:\\IT\\node项目\\node_modules&#x27;,    &#x27;G:\\IT\\node_modules&#x27;,    &#x27;G:\\node_modules&#x27;  ]&#125;*/</span><br></pre></td></tr></table></figure><p><code>exports</code>这个对象是用于对外提供变量</p><p>例如你要使用某个js文件中的变量或者执行js文件中的某个函数</p><p>那么你就需要在那个js文件中对外进行暴露对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let name = &quot;枫枫知道&quot;function sayHi() &#123;    console.log(&#x27;say Hi&#x27;)&#125;// 对外暴露module.exports = &#123;    name,    sayHi,&#125;// 注意这个写法是es6的简写</span><br></pre></td></tr></table></figure><p>这样我们就可以接收到m1给我们暴露的对象了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const m1 = require(&#x27;./m1.js&#x27;)  // 加载用户自定义模块console.log(m1)  // &#123; name: &#x27;枫枫知道&#x27;, sayHi: [Function: sayHi] &#125;console.log(m1.name)  // 使用m1中的变量m1.sayHi()  // 执行m1中的函数</span><br></pre></td></tr></table></figure><p>我们也可以使用对象结构的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123;name, sayHi&#125; = require(&#x27;./m1.js&#x27;)  // 加载用户自定义模块console.log(name)  // 使用m1中的变量sayHi()  // 执行m1中的函数</span><br></pre></td></tr></table></figure><h4 id="exports简写"><a href="#exports简写" class="headerlink" title="exports简写"></a>exports简写</h4><p>上面我们使用module.exports就可以暴露一个对象</p><p>那么它其实也有一个简写，也就是去掉module</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 只能这样写exports.name = nameexports.sayHi = sayHi</span><br></pre></td></tr></table></figure><p>注意，exports不能直接写等于一个对象，只能单独写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 不能这样写exports = &#123;  name,  sayHi&#125;</span><br></pre></td></tr></table></figure><h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><h3 id="npm是什么"><a href="#npm是什么" class="headerlink" title="npm是什么"></a>npm是什么</h3><p>npm是node中管理第三方模块的工具，和python中的pip类似，可以下载第三方模块等很多功能</p><p>下载第三方模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install momentnpm i moment</span><br></pre></td></tr></table></figure><p>在项目目录下的命令行中输入之后就会去下载这个第三方模块了</p><p>它会给你放在项目路径下的<code>node_moudules</code>目录下</p><p>并且还会有一个<code>packeage-lock.json</code>的文件，这里面都记录着你安装的所有包</p><h3 id="安装指定版本的包"><a href="#安装指定版本的包" class="headerlink" title="安装指定版本的包"></a>安装指定版本的包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment@2.22.2</span><br></pre></td></tr></table></figure><p>安装之后，就会覆盖之前安装的包</p><p>语义化版本规范 <code>2.22.2</code></p><p>第一位数字：大版本</p><p>第二位数字：功能版本</p><p>第三位数字：bug修复版本</p><h3 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h3><p>npm规定，在项目根目录中，必须提供一个叫做<code>package.json</code>的包管理配置文件，用来记录与项目有关的一些配置信息，例如：</p><ul><li>项目的名称，版本号，描述</li><li>项目中都用到了哪些包</li><li>哪些包只在开发期间用到</li><li>哪些包在开发和部署时都会用到</li></ul><h4 id="快速创建package-json"><a href="#快速创建package-json" class="headerlink" title="快速创建package.json"></a>快速创建package.json</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>项目根目录不能是中文，不能有空格得其他特殊字符，不然无法创建</p><p><img src="http://python.fengfengzhidao.com/1031/20211225133947.png" alt="img"></p><h4 id="安装多个包"><a href="#安装多个包" class="headerlink" title="安装多个包"></a>安装多个包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment jquery</span><br></pre></td></tr></table></figure><h3 id="一次性安装所有包"><a href="#一次性安装所有包" class="headerlink" title="一次性安装所有包"></a>一次性安装所有包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm installnpm i</span><br></pre></td></tr></table></figure><p>就会安装<code>package.json</code>中的<code>dependencies</code>节点下的所有包</p><h4 id="卸载指定的包"><a href="#卸载指定的包" class="headerlink" title="卸载指定的包"></a>卸载指定的包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall moment</span><br></pre></td></tr></table></figure><p>卸载之后会将这个包名从<code>dependencies</code>节点上移除掉</p><h3 id="devDependencies节点"><a href="#devDependencies节点" class="headerlink" title="devDependencies节点"></a>devDependencies节点</h3><p>开发环境中用到的包，项目上线不会用到，那么就可以把包下载到开发节点中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -D// 上述命令是简写，等价于下面的写法npm install 包名 --save-dev</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;  &quot;moment&quot;: &quot;^2.22.2&quot;&#125;,&quot;devDependencies&quot;: &#123;  &quot;webpack&quot;: &quot;^5.65.0&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么下包速度慢"><a href="#为什么下包速度慢" class="headerlink" title="为什么下包速度慢"></a>为什么下包速度慢</h3><p>因为中国距离npm服务器太远了</p><h4 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 查看当前镜像源npm config get registry// 切换到淘宝镜像源npm config set registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h4 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h4><p>nrm可以方便的切换镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nrm -g  // 全局安装// 查看可用镜像源nrm ls// 使用镜像源nrm use taobao</span><br></pre></td></tr></table></figure><h3 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 安装全局包npm i 包名 -g// 卸载全局包npm uninstall 包名 -g</span><br></pre></td></tr></table></figure><h3 id="i5ting-toc将md转换为html"><a href="#i5ting-toc将md转换为html" class="headerlink" title="i5ting_toc将md转换为html"></a>i5ting_toc将md转换为html</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装npm i i5ting_toc -g// 使用i5ting_toc -f md文件 -o</span><br></pre></td></tr></table></figure><h2 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h2><ol><li>包必须以单独的目录存在</li><li>包的顶级目录下必须包含package.json这个配置文件</li><li>package.json文件中必须包含name，version，main这三个属性，分别代表包的名字，版本号，包的入口</li></ol><p>自己开发一个包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// package.json  配置文件// index.js  入口文件// README.md  说明文档</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225142320.png" alt="img"></p><h4 id="初始化package-json"><a href="#初始化package-json" class="headerlink" title="初始化package.json"></a>初始化package.json</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  &quot;name&quot;: &quot;feng_pack&quot;,   包名，可以与项目名不同，包名唯一  &quot;version&quot;: &quot;1.0.0&quot;,  版本号  &quot;main&quot;: &quot;index.js&quot;,  入口文件  &quot;description&quot;: &quot;提供了格式化时间、HTMLEscape的功能&quot;,  介绍  &quot;keywords&quot;: [&quot;fengfeng&quot;, &quot;feng&quot;, &quot;html&quot;, &quot;escape&quot;],  搜索关键字  &quot;license&quot;: &quot;ISC&quot;  开源许可协议&#125;</span><br></pre></td></tr></table></figure><h4 id="在index-js中写你的代码"><a href="#在index-js中写你的代码" class="headerlink" title="在index.js中写你的代码"></a>在index.js中写你的代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 入口文件// 时间格式化function dateFormat(dateStr) &#123;    const dt = new Date(dateStr)    const y = dt.getFullYear()    const m = padZero(dt.getMonth() + 1)    const d = padZero(dt.getDate())    const hh = padZero(dt.getHours())    const mm = padZero(dt.getMinutes())    const ss = padZero(dt.getSeconds())    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`&#125;// 时间补零function padZero(n) &#123;    return n &gt; 9 ? n : &#x27;0&#x27; + n&#125;// 向外暴露需要的成员module.exports = &#123;    dateFormat&#125;</span><br></pre></td></tr></table></figure><p>自己调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const feng_pack = require(&#x27;./feng_pack/index.js&#x27;)console.log(feng_pack.dateFormat(new Date()))</span><br></pre></td></tr></table></figure><p>也可以省略index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const feng_pack = require(&#x27;./feng_pack&#x27;)console.log(feng_pack.dateFormat(new Date()))</span><br></pre></td></tr></table></figure><p>如果没有指定js文件的路径，node就会查找<code>package.json</code>中main属性对应的js路径，将它进行导入</p><h4 id="在index-js中定义转义HTML的方法"><a href="#在index-js中定义转义HTML的方法" class="headerlink" title="在index.js中定义转义HTML的方法"></a>在index.js中定义转义HTML的方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// HTML转义function htmlEscape(htmlStr)&#123;    // g代表全局匹配    return htmlStr.replace(/&lt;|&gt;|&quot;|&amp;/g, (match)=&gt;&#123;        switch (match)&#123;            case &quot;&lt;&quot;:                return &quot;&amp;lt;&quot;            case &quot;&gt;&quot;:                return &quot;&amp;gt;&quot;            case &#x27;&quot;&#x27;:                return &quot;&amp;quot;&quot;            case &quot;&amp;&quot;:                return &quot;&amp;amp;&quot;        &#125;    &#125;)&#125;</span><br></pre></td></tr></table></figure><h4 id="在index-js中定义还原html的方法"><a href="#在index-js中定义还原html的方法" class="headerlink" title="在index.js中定义还原html的方法"></a>在index.js中定义还原html的方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 还原htmlfunction htmlUnEscape(htmlStr)&#123;    // g代表全局匹配    return htmlStr.replace(/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g, (match)=&gt;&#123;        switch (match)&#123;            case &quot;&amp;lt;&quot;:                return &quot;&lt;&quot;            case &quot;&amp;gt;&quot;:                return &quot;&gt;&quot;            case &#x27;&amp;quot;&#x27;:                return &#x27;&quot;&#x27;            case &quot;&amp;amp;&quot;:                return &quot;&amp;&quot;        &#125;    &#125;)&#125;</span><br></pre></td></tr></table></figure><h4 id="将不同的功能进行模块化拆分"><a href="#将不同的功能进行模块化拆分" class="headerlink" title="将不同的功能进行模块化拆分"></a>将不同的功能进行模块化拆分</h4><p>当前的index.js文件中，功能比较多，我们将这些功能拆分为不同的模块</p><p><img src="http://python.fengfengzhidao.com/1031/20211225145438.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 入口文件const date = require(&#x27;./src/dateFormat&#x27;)const escape = require(&#x27;./src/htmlEscape&#x27;)// 向外暴露需要的成员module.exports = &#123;    ...date,    ...escape&#125;</span><br></pre></td></tr></table></figure><h4 id="编写包的说明文档"><a href="#编写包的说明文档" class="headerlink" title="编写包的说明文档"></a>编写包的说明文档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## 安装</span><br></pre></td></tr></table></figure><p>npm install itheima-tools</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## 导入```jsconst feng_back = require(&#x27;feng_pack&#x27;)</span><br></pre></td></tr></table></figure><h2 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 调用 dateFormat 对时间进行格式化const dtStr = itheima.dateFormat(new Date())// 结果  2020-04-03 17:20:58console.log(dtStr)</span><br></pre></td></tr></table></figure><h2 id="转义-HTML-中的特殊字符"><a href="#转义-HTML-中的特殊字符" class="headerlink" title="转义 HTML 中的特殊字符"></a>转义 HTML 中的特殊字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 带转换的 HTML 字符串const htmlStr = &#x27;&lt;h1 title=&quot;abc&quot;&gt;这是h1标签&lt;span&gt;123&amp;nbsp;&lt;/span&gt;&lt;/h1&gt;&#x27;// 调用 htmlEscape 方法进行转换const str = itheima.htmlEscape(htmlStr)// 转换的结果 &amp;lt;h1 title=&amp;quot;abc&amp;quot;&amp;gt;这是h1标签&amp;lt;span&amp;gt;123&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;console.log(str)</span><br></pre></td></tr></table></figure><h2 id="还原-HTML-中的特殊字符"><a href="#还原-HTML-中的特殊字符" class="headerlink" title="还原 HTML 中的特殊字符"></a>还原 HTML 中的特殊字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 待还原的 HTML 字符串const str2 = itheima.htmlUnEscape(str)// 输出的结果 &lt;h1 title=&quot;abc&quot;&gt;这是h1标签&lt;span&gt;123&amp;nbsp;&lt;/span&gt;&lt;/h1&gt;console.log(str2)</span><br></pre></td></tr></table></figure><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ISC</span><br></pre></td></tr></table></figure><h3 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h3><h4 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h4><p>点击sign up注册账号</p><p>我的账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fengfeng12</span><br></pre></td></tr></table></figure><p>登录npm账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login// 登录不上试一试npm login -d</span><br></pre></td></tr></table></figure><p>在运行npm login之前<br>需要将npm下包的服务器切换为npm的官方服务器<br>否则就会发布包失败</p><p>登录不上的，看看你们的镜像服务器改没有</p><h4 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h4><p>切换到包的根目录后，运行npm publish，即可发布到npm上（包名不能雷同）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h4 id="删除已发布的包"><a href="#删除已发布的包" class="headerlink" title="删除已发布的包"></a>删除已发布的包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish 包名 --force</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>只能删除发布之后72小时的包</li><li>删除的包，在24小时内不允许重复发布</li></ul><h1 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h1><p>自定义模块的加载顺序</p><ol><li>按照确切的文件名进行加载</li><li>补全.js扩展名进行加载</li><li>补全.json扩展名进行加载</li><li>补全.node扩展名进行加载</li><li>加载失败，终端报错</li></ol><h1 id="Express-Web开发框架"><a href="#Express-Web开发框架" class="headerlink" title="Express Web开发框架"></a>Express Web开发框架</h1><h2 id="初识express"><a href="#初识express" class="headerlink" title="初识express"></a>初识express</h2><p>下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express@4.17.1</span><br></pre></td></tr></table></figure><p>简单使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, ()=&gt;&#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听GET请求与POST请求"><a href="#监听GET请求与POST请求" class="headerlink" title="监听GET请求与POST请求"></a>监听GET请求与POST请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)// 监听get请求app.get(&#x27;/index&#x27;, (request, response) =&gt; &#123;    // 响应内容    response.send(&#x27;&lt;h1&gt;index&lt;/h1&gt;&#x27;)&#125;)// 监听post请求app.post(&#x27;/index&#x27;, (request, response) =&gt; &#123;    // 发送json数据    response.send(&#123;name: &#x27;张三&#x27;, age: 21&#125;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取查询参数"><a href="#获取查询参数" class="headerlink" title="获取查询参数"></a>获取查询参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.query// 结果是一个对象</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225155650.png" alt="img"></p><p><img src="http://python.fengfengzhidao.com/1031/20211225155745.png" alt="img"></p><h3 id="获取URL中的动态参数"><a href="#获取URL中的动态参数" class="headerlink" title="获取URL中的动态参数"></a>获取URL中的动态参数</h3><p>通过<code>request.params</code>可以访问到URL中，通过:匹配到的动态参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.params</span><br><span class="line">app.get(&#x27;/user/:id&#x27;, (request, response)=&gt;&#123;    console.log(request.params)    response.send(&#123;id: request.params.id, age: 21&#125;)&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225160239.png" alt="img"></p><h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 开启静态资源服务app.use(express.static(&#x27;../http操作/clock&#x27;))// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)</span><br></pre></td></tr></table></figure><p>这样在访问的时候直接访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/index.html</span><br></pre></td></tr></table></figure><p>托管多个静态目录，那么就多写几个use</p><h3 id="挂载路径前缀"><a href="#挂载路径前缀" class="headerlink" title="挂载路径前缀"></a>挂载路径前缀</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&#x27;/clock&#x27;, express.static(&#x27;../http操作/clock&#x27;))</span><br></pre></td></tr></table></figure><p>访问文件就需要这样写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/clock/index.html</span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p>之前编写node的web项目，修改代码之后都需要自己手动重启项目</p><p>有了nodemon之后，它会自动帮我们重启项目</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><p>webstorm中配置nodemon</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\26634\AppData\Roaming\npm\node_modules\nodemon\bin\nodemon.js</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225162603.png" alt="img"></p><p>这样我们修改代码之后，项目就会自动重启了</p><p><img src="http://python.fengfengzhidao.com/1031/20211225162730.png" alt="img"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.请求方法（请求路径，请求处理的函数）</span><br></pre></td></tr></table></figure><p>所以这样写也是可以的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)function index(request, response) &#123;    response.send(&#x27;&lt;h1&gt;index&lt;/h1&gt;&#x27;)&#125;// 监听get请求app.get(&#x27;/index&#x27;, index)app.get(&#x27;/&#x27;, index)</span><br></pre></td></tr></table></figure><h3 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h3><p>将路由单独抽离为路由模块</p><ul><li>创建路由模块对应的js文件</li><li>调用<code>express.Router()</code>函数创建一个路由对象</li><li>向对象路由上挂载具体的路由</li><li>使用<code>module.exports</code>向外贡享路由</li><li>使用<code>app.use()</code>函数来注册路由</li></ul><p>router.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建路由对象const router = express.Router()function index(request, response) &#123;    response.send(&#x27;&lt;h1&gt;index&lt;/h1&gt;&#x27;)&#125;// 挂载路由router.get(&#x27;/index&#x27;, index)router.get(&#x27;/&#x27;, index)// 共享路由对象module.exports = router</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 导入路由对象const router = require(&#x27;./router&#x27;)// 注册路由app.use(router)// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="添加路由前缀"><a href="#添加路由前缀" class="headerlink" title="添加路由前缀"></a>添加路由前缀</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&#x27;/api&#x27;, router)</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>特指业务流程的中间处理环节</p><p>调用流程</p><p><img src="http://python.fengfengzhidao.com/1031/20211225164827.png" alt="img"></p><h3 id="中间件的格式"><a href="#中间件的格式" class="headerlink" title="中间件的格式"></a>中间件的格式</h3><p><img src="http://python.fengfengzhidao.com/1031/20211225165046.png" alt="img"></p><p>中间件函数与路由函数非常相似，中间件函数多了一个next的形参</p><h3 id="next函数的作用"><a href="#next函数的作用" class="headerlink" title="next函数的作用"></a>next函数的作用</h3><p>next()是多个中间件连续调用的关键</p><p>定义中间件函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mw = function (request, response, next) &#123;    console.log(&#x27;这是最简单的中间件函数&#x27;)    // 把流转关系转交给下一个中间件或路由函数    next()&#125;</span><br></pre></td></tr></table></figure><h3 id="全局生效的中间件"><a href="#全局生效的中间件" class="headerlink" title="全局生效的中间件"></a>全局生效的中间件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 注册全局中间件app.use(mw)</span><br></pre></td></tr></table></figure><h3 id="中间件的用法"><a href="#中间件的用法" class="headerlink" title="中间件的用法"></a>中间件的用法</h3><p>在中间件中定义对象挂载到请求对象中</p><p>在路由函数中就可以接收到这个请求对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)const mw = function (request, response, next) &#123;    console.log(&#x27;这是最简单的中间件函数&#x27;)    // 把流转关系转交给下一个中间件或路由函数    // 获取访问的时间    const date = require(&#x27;feng_pack&#x27;)    request.now = date.dateFormat(new Date())    next()&#125;// 注册全局中间件app.use(mw)// 监听get请求app.get(&#x27;/index&#x27;, (request, response)=&gt;&#123;    // 接收中间件中挂载的属性    console.log(request.now)    response.send(&#x27;index&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义多个全局中间件"><a href="#定义多个全局中间件" class="headerlink" title="定义多个全局中间件"></a>定义多个全局中间件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mw = function (request, response, next) &#123;    console.log(&#x27;这是最简单的中间件函数&#x27;)    // 把流转关系转交给下一个中间件或路由函数    // 获取访问的时间    const date = require(&#x27;feng_pack&#x27;)    request.now = date.dateFormat(new Date())    next()&#125;// 注册全局中间件app.use(mw)// 第二个中间件app.use(function (request, response, next)&#123;    console.log(&#x27;第二个全局中间件&#x27;)    next()&#125;)</span><br></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><p>挂载到对应的路由上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)const mw1 = function (request, response, next) &#123;    console.log(&#x27;局部中间件1&#x27;)    const date = require(&#x27;feng_pack&#x27;)    request.now = date.dateFormat(new Date())    next()&#125;// 监听get请求app.get(&#x27;/index&#x27;, mw1, (request, response)=&gt;&#123;    // 接收中间件中挂载的属性    console.log(request.now)    response.send(&#x27;index&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义多个局部中间件"><a href="#定义多个局部中间件" class="headerlink" title="定义多个局部中间件"></a>定义多个局部中间件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)const mw1 = function (request, response, next) &#123;    console.log(&#x27;局部中间件1&#x27;)    const date = require(&#x27;feng_pack&#x27;)    request.now = date.dateFormat(new Date())    next()&#125;const mw2 = function (request, response, next) &#123;    console.log(&#x27;局部中间件2&#x27;, request.now)    next()&#125;// 监听get请求app.get(&#x27;/index&#x27;, mw1, mw2, (request, response)=&gt;&#123;    // 接收中间件中挂载的属性    console.log(request.now)    response.send(&#x27;index&#x27;)&#125;)</span><br></pre></td></tr></table></figure><p>这两种写法都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#x27;/index&#x27;, mw1, mw2, (request, response)=&gt;&#123;response.send(&#x27;index&#x27;)&#125;)</span><br><span class="line">app.get(&#x27;/index&#x27;, [mw1, mw2], (request, response)=&gt;&#123;response.send(&#x27;index&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件的5个注意事项"><a href="#中间件的5个注意事项" class="headerlink" title="中间件的5个注意事项"></a>中间件的5个注意事项</h3><ol><li>路由之前注册中间件</li><li>客户端发送过来的请求，可连续调用多个中间件</li><li>处理完中间件业务代码之后，不要忘记调用next()函数</li><li>调用完next之后不要再写额外的代码了</li><li>连续调用多个中间件的时候，多个中间件之间共享req和res对象</li></ol><h3 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h3><h4 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h4><p>通过app.use()或者绑定到路由上的中间件，都得应用级别中间件</p><h4 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a>路由级别中间件</h4><p>绑定到Router实例上的中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const app = express()const router = express.Router()// 路由级别中间件router.use(function(req, res, next)&#123;    console.log(&quot;路由级别中间件&quot;)    next()  &#125;)</span><br></pre></td></tr></table></figure><h4 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(function(err, req, res, next)&#123;    console.log(&quot;发生了错误，&quot;, err.message)    res.send(&#x27;Error&#x27;, err.message)&#125;)</span><br></pre></td></tr></table></figure><p>必须注册在所有路由的后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 监听get请求app.get(&#x27;/index&#x27;, (request, response)=&gt;&#123;    // 接收中间件中挂载的属性    throw new Error(&#x27;出错了&#x27;)    response.send(&#x27;index&#x27;)&#125;)// 必须放在路由的后面app.use((err,req, res, next) =&gt;&#123;    console.log(&#x27;错误中间件&#x27;, err.message)    res.send(&#x27;内部出错了&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h4 id="内置级别中间件"><a href="#内置级别中间件" class="headerlink" title="内置级别中间件"></a>内置级别中间件</h4><p>express.static 快速托管静态资源的中间件</p><p>express.json 解析json格式的请求体数据</p><p>express.urlencoded 解析url-encoded格式的请求体数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 配置解析json的中间件app.use(express.json())// 配置解析url-encoded格式数据的中间件app.use(express.urlencoded(&#123;extended: false&#125;))</span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)// 监听get请求app.post(&#x27;/&#x27;, (request, response)=&gt;&#123;    // 拿到post请求中请求体的数据    console.log(request.body)  // 如果没有配置json解析的中间件， 则request.body为 undefined    response.send(&#x27;index&#x27;)&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225181757.png" alt="img"></p><p>配置解析json的中间件就可以解析json数据了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.json())</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225181839.png" alt="img"></p><p><img src="http://python.fengfengzhidao.com/1031/20211225182059.png" alt="img"></p><p>需要配置解析urlencoded中间件才能获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.urlencoded(&#123;extended: false&#125;))</span><br></pre></td></tr></table></figure><p>关于extended配置对象的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为false：[Object: null prototype] &#123; name: &#x27;王五&#x27; &#125;为true：&#123; name: &#x27;王五&#x27; &#125;</span><br></pre></td></tr></table></figure><h4 id="自定义解析请求体的中间件"><a href="#自定义解析请求体的中间件" class="headerlink" title="自定义解析请求体的中间件"></a>自定义解析请求体的中间件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 解析表单数据的中间件app.use((req, res, next) =&gt; &#123;    // 定义中间件的具体逻辑    let str = &#x27;&#x27;    // 监听req的data事件    req.on(&#x27;data&#x27;, chunk =&gt; &#123;            str += chunk        &#125;    )    req.on(&#x27;end&#x27;, () =&gt; &#123;        // 在str中存放的是完整的请求体数据        // 解析请求体的数据        const qs = require(&#x27;querystring&#x27;)        req.body = qs.parse(str)        next()    &#125;)&#125;)</span><br></pre></td></tr></table></figure><p>封装为模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 解析表单数据的中间件function bodyParse(req, res, next) &#123;    // 定义中间件的具体逻辑    let str = &#x27;&#x27;    // 监听req的data事件    req.on(&#x27;data&#x27;, chunk =&gt; &#123;            str += chunk        &#125;    )    req.on(&#x27;end&#x27;, () =&gt; &#123;        // 在str中存放的是完整的请求体数据        // 解析请求体的数据        const qs = require(&#x27;querystring&#x27;)        req.body = qs.parse(str)        next()    &#125;)&#125;// 向外导出module.exports = bodyParse</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 解析表单数据的中间件const bodyParse = require(&#x27;./8.body_parse.js&#x27;)app.use(bodyParse)</span><br></pre></td></tr></table></figure><h2 id="接口操作"><a href="#接口操作" class="headerlink" title="接口操作"></a>接口操作</h2><p>创建基本的服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建web服务器const app = express()// 导入路由模块const apiRouter = require(&#x27;./apiRouter&#x27;)app.use(&#x27;/api&#x27;, apiRouter)// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)</span><br></pre></td></tr></table></figure><p>创建路由模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 导入expressconst express = require(&#x27;express&#x27;)// 创建路由对象const router = express.Router()// 共享路由对象module.exports = router</span><br></pre></td></tr></table></figure><p>编写GET接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.get(&#x27;/use&#x27;, (req, res)=&gt;&#123;    const quert = req.query    res.send(&#123;        status: 0,        msg: &#x27;GET 请求成功&#x27;,        data: quert    &#125;)&#125;)</span><br></pre></td></tr></table></figure><p>编写POST请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#x27;/user&#x27;, (req, res)=&gt;&#123;    const body = req.body    res.send(&#123;        status: 0,        msg: &#x27;POST 请求成功&#x27;,        data: body    &#125;)&#125;)</span><br></pre></td></tr></table></figure><p>如果是发送json或者urlencoded的需要在app之前注册中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.json())app.use(express.urlencoded(&#123;extended: false&#125;))app.use(&#x27;/api&#x27;, apiRouter)</span><br></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>写一个html文件，点一下按钮就发送请求到后端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;跨域测试&lt;/title&gt;    &lt;script src=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button id=&quot;get&quot;&gt;GET&lt;/button&gt;&lt;button id=&quot;post&quot;&gt;POST&lt;/button&gt;&lt;script&gt;    $(&#x27;#get&#x27;).click(function ()&#123;        $.get(&#x27;http://localhost:80/api/user?name=张三&#x27;, function (res)&#123;            console.log(res)        &#125;)    &#125;)    $(&#x27;#post&#x27;).click(function ()&#123;        $.post(&#x27;http://localhost:80/api/user&#x27;, &#123;data: &quot;张三&quot;&#125;, function (res)&#123;            console.log(res)        &#125;)    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以看到请求直接报错了</p><p><img src="http://python.fengfengzhidao.com/1031/20211225190309.png" alt="img"></p><p>请求是发送到后端了，并且也成功返回了，是浏览器拦截了数据，<br>这就是同源策略</p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 1. 安装中间件npm i cors// 2.导入中间件const cors = require(&quot;cors&quot;)// 3.在路由之前配置中间件app.use(cors())</span><br><span class="line">// 导入corsconst cors = require(&#x27;cors&#x27;)// 注册corsapp.use(cors())</span><br></pre></td></tr></table></figure><p>这样既可解决跨域问题</p><p><img src="http://python.fengfengzhidao.com/1031/20211225191535.png" alt="img"></p><h3 id="CORS响应头部"><a href="#CORS响应头部" class="headerlink" title="CORS响应头部"></a>CORS响应头部</h3><p>简单请求</p><p>GET，POST，HEAD</p><p>预检请求</p><p>除以上三种之外的请求方式</p><p>JSONP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// jsonp路由创建app.get(&#x27;/api/jsonp&#x27;, (req, res)=&gt;&#123;    // 获取客户端发送来的回调函数名字    const funName = req.query.callback    // 得到要通过jsonp形式发送的数据    const data = &#123;        name: &quot;fengfeng&quot;,        age: 21    &#125;    // 拼接出一个函数    const scriptStr = `$&#123;funName&#125;($&#123;JSON.stringify(data)&#125;)`    // 响应    res.send(scriptStr)&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225193636.png" alt="img"></p><p>前端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#jsonp&#x27;).click(function () &#123;    $.ajax(&#123;        url: &#x27;http://localhost/api/jsonp&#x27;,        method: &#x27;GET&#x27;,        dataType: &#x27;jsonp&#x27;,        success(res)&#123;            console.log(res)        &#125;    &#125;)&#125;)</span><br></pre></td></tr></table></figure><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><p>安装mysql模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip i mysql</span><br></pre></td></tr></table></figure><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mysql = require(&#x27;mysql&#x27;)// 建立连接const db = mysql.createPool(&#123;    host: &#x27;127.0.0.1&#x27;,    user: &#x27;root&#x27;,    password: &#x27;root&#x27;,    database: &#x27;node_01&#x27;,&#125;)// 测试连接是否成功db.query(&#x27;show databases;&#x27;, (err, result)=&gt;&#123;    if (err)&#123;        console.log(err.message)        return    &#125;    // 连接成功    console.log(result)&#125;)</span><br></pre></td></tr></table></figure><p>创建一张表方便后续操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table student (id int primary key AUTO_INCREMENT, name varchar(16), age int);</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const db = require(&#x27;./1.连接mysql&#x27;)const user = &#123;    name: &quot;枫枫&quot;,    age: 21&#125;const sqlStr = &#x27;insert into student (name, age) values (?, ?)&#x27;  // 问号代表占位符db.query(sqlStr, [user.name, user.age], (err, result) =&gt; &#123;    if (err)&#123;        return console.log(err.message)    &#125;    if (result.affectedRows === 1)&#123;        console.log(&#x27;数据插入成功&#x27;)    &#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="便捷插入"><a href="#便捷插入" class="headerlink" title="便捷插入"></a>便捷插入</h4><p>如果user对象的属性与mysql表中的字段一一对应，那么可以使用如下方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const db = require(&#x27;./1.连接mysql&#x27;)const user = &#123;    name: &quot;枫枫&quot;,    age: 21&#125;const sqlStr = &#x27;insert into student set ?&#x27;db.query(sqlStr, user, (err, result) =&gt; &#123;    if (err) &#123;        return console.log(err.message)    &#125;    if (result.affectedRows === 1) &#123;        console.log(&#x27;数据插入成功&#x27;)    &#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const db = require(&#x27;./1.连接mysql&#x27;)const sqlStr = &#x27;select * from student&#x27;db.query(sqlStr, (err, res)=&gt;&#123;    if (err) return    console.log(res)&#125;)</span><br></pre></td></tr></table></figure><p>结果是一个数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[  RowDataPacket &#123; id: 1, name: &#x27;枫枫&#x27;, age: 21 &#125;,  RowDataPacket &#123; id: 2, name: &#x27;张三&#x27;, age: 26 &#125;,  RowDataPacket &#123; id: 3, name: &#x27;王五&#x27;, age: 26 &#125;]</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const db = require(&#x27;./1.连接mysql&#x27;)const user = &#123;    id:2,    name: &#x27;枫枫&#x27;,    age: 24,&#125;const sqlStr = &#x27;update student set name=?, age=? where id=?&#x27;db.query(sqlStr, [user.name, user.age, user.id], (err, res)=&gt;&#123;    if (err) return console.log(err.message)    console.log(res.affectedRows)  // 数据更新的条数    if (res.affectedRows)&#123;        console.log(&#x27;数据更新成功&#x27;)    &#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="便捷更新"><a href="#便捷更新" class="headerlink" title="便捷更新"></a>便捷更新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123;    id:2,    name: &#x27;张子枫&#x27;,    age: 24,&#125;const sqlStr = &#x27;update student set ? where id=?&#x27;db.query(sqlStr, [user, user.id], (err, res)=&gt;&#123;    if (err) return console.log(err.message)    console.log(res.affectedRows)  // 数据更新的条数    if (res.affectedRows)&#123;        console.log(&#x27;数据更新成功&#x27;)    &#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const db = require(&#x27;./1.连接mysql&#x27;)const sqlStr = &#x27;delete from student where id=?&#x27;db.query(sqlStr, 3, (err, res) =&gt; &#123;    if (err) return    console.log(res.affectedRows)    console.log(&#x27;删除成功&#x27;)&#125;)</span><br></pre></td></tr></table></figure><h1 id="前后端身份认证"><a href="#前后端身份认证" class="headerlink" title="前后端身份认证"></a>前后端身份认证</h1><h2 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h2><ol><li>服务端渲染的web开发模式</li><li>前后端分离</li></ol><p>不同模式下的身份认证</p><p>服务端渲染推荐使用session认证机制</p><p>前后端分离推荐使用JWT认证机制</p><h3 id="session使用"><a href="#session使用" class="headerlink" title="session使用"></a>session使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 安装npm i express-session</span><br></pre></td></tr></table></figure><h4 id="配置session中间件"><a href="#配置session中间件" class="headerlink" title="配置session中间件"></a>配置session中间件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let session = require(&#x27;express-session&#x27;)// 配置session中间件app.use(session(&#123;    secret: &#x27;keyboard cat&#x27;,  // 值可以是任意的字符串    resave: false,  // 固定写法    saveUninitialized: true,  // 固定写法&#125;))</span><br></pre></td></tr></table></figure><h4 id="向session中存放数据"><a href="#向session中存放数据" class="headerlink" title="向session中存放数据"></a>向session中存放数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)const app = express()let session = require(&#x27;express-session&#x27;)app.use(express.json())app.use(express.urlencoded(&#123;extended: false&#125;))// 配置session中间件app.use(session(&#123;    secret: &#x27;keyboard cat&#x27;,  // 值可以是任意的字符串    resave: false,  // 固定写法    saveUninitialized: true,  // 固定写法&#125;))// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)function login(req, res)&#123;    let name = req.body.name    let pwd = req.body.pwd    if (name !== &#x27;root&#x27; || pwd !== &#x27;root&#x27;)&#123;        return res.send(&#123;status: 1, msg: &#x27;登录失败&#x27;&#125;)    &#125;    req.session.user = name    req.session.islogin = true    res.send(&#123;status: 0, msg: &#x27;登录成功&#x27;&#125;)&#125;app.post(&#x27;/api/login&#x27;, login)</span><br></pre></td></tr></table></figure><h4 id="从session中取数据"><a href="#从session中取数据" class="headerlink" title="从session中取数据"></a>从session中取数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(req.session.user, req.session.islogin)</span><br></pre></td></tr></table></figure><h4 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><h3 id="JWT认证机制"><a href="#JWT认证机制" class="headerlink" title="JWT认证机制"></a>JWT认证机制</h3><p>英文全称（json web token）目前主流的跨域认证机制</p><h4 id="jwt组成部分"><a href="#jwt组成部分" class="headerlink" title="jwt组成部分"></a>jwt组成部分</h4><ul><li>Header（头部）</li><li>Payload（有效载荷）</li><li>Signature（签名）</li></ul><p>三者之间使用 . 连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><p><img src="http://python.fengfengzhidao.com/1031/20211225215833.png" alt="img"></p><h4 id="使用jwt"><a href="#使用jwt" class="headerlink" title="使用jwt"></a>使用jwt</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 安装npm i jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><ul><li>jsonwebtoken 用于加密</li><li>express-jwt用于解密</li></ul><h4 id="生成JWT"><a href="#生成JWT" class="headerlink" title="生成JWT"></a>生成JWT</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const token = jwt.sign(&#123;name&#125;, secretKey, &#123;expiresIn: &#x27;30s&#x27;&#125;)</span><br></pre></td></tr></table></figure><ul><li>name：要加密的内容</li><li>secretKey：加密字符串</li><li>expiresIn：过期时间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const jwt = require(&#x27;jsonwebtoken&#x27;)const expressJWT = require(&#x27;express-jwt&#x27;)const express = require(&#x27;express&#x27;)const app = express()// 定义secret秘钥， 建议秘钥名字为secretKeyconst secretKey = &#x27;it fengfeng ^_^&#x27;app.use(express.json())app.use(express.urlencoded(&#123;extended: false&#125;))// 启动服务器app.listen(80, () =&gt; &#123;    console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;)function login(req, res) &#123;    let name = req.body.name    let pwd = req.body.pwd    if (name !== &#x27;root&#x27; || pwd !== &#x27;root&#x27;) &#123;        return res.send(&#123;status: 1, msg: &#x27;登录失败&#x27;&#125;)    &#125;    res.send(&#123;        status: 200,        msg: &#x27;登录成功&#x27;,        // 使用jwt.sign生成token        token: jwt.sign(&#123;name&#125;, secretKey, &#123;expiresIn: &#x27;30s&#x27;&#125;)    &#125;)&#125;app.post(&#x27;/api/login&#x27;, login)</span><br></pre></td></tr></table></figure><p>解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 注册app.use(expressJWT(&#123;secret: secretKey&#125;).unless(&#123;path: [/^\/api\//]&#125;))</span><br></pre></td></tr></table></figure><ul><li>unless：不需要访问权限的接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法大全</title>
      <link href="/archives/3.html"/>
      <url>/archives/3.html</url>
      
        <content type="html"><![CDATA[<h2 id="ES6语法大全"><a href="#ES6语法大全" class="headerlink" title="ES6语法大全"></a>ES6语法大全</h2><h1 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let a = 23;  // 块级作用域变量const b = 21;  // 只要赋值就不能被修改// b = 24;  // 不可修改console.log(a, b)</span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;    // 初始化方法    constructor()&#123;        // this就是实例化对象        this.type = &#x27;animal&#x27;    &#125;    // 实例方法    says(say)&#123;        console.log(this.type + &#x27; says &#x27; + say)    &#125;&#125;let animal = new Animal()animal.says(&#x27;hello&#x27;) //animal says hello// 继承父类Animalclass Cat extends Animal &#123;    constructor()&#123;        // 调用父类的方法        super()        this.type = &#x27;cat&#x27;    &#125;&#125;let cat = new Cat()cat.says(&#x27;hello&#x27;) //cat says hello</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Student&#123;    constructor(name, age) &#123;        this.name = name        this.age = age    &#125;    sayName()&#123;        return &#x27;我是&#x27; + this.name + &#x27;, 今年&#x27; + this.age    &#125;&#125;let zhangsan = new Student(&#x27;张三&#x27;, 32)console.log(zhangsan.sayName())</span><br></pre></td></tr></table></figure><p>这样一对比，是不是和python的面向对象很像</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>简单的说，就是省去了function</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function getName()&#123;    return &#x27;我是张三&#x27;&#125;let get_name = ()=&gt;&#123;    return &#x27;我是新张三&#x27;&#125;console.log(getName())console.log(get_name())</span><br></pre></td></tr></table></figure><p>对于回调函数，箭头函数是大大的方便</p><p>箭头函数可以处理this指向的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;    constructor(name, age) &#123;        this.name = name        this.age = age    &#125;    sayName() &#123;        setTimeout(function () &#123;            // 无法拿到实例化对象的那个this            console.log(&#x27;function： 我是&#x27; + this.name + &#x27;, 今年&#x27; + this.age)        &#125;, 1000)        setTimeout(() =&gt; &#123;            // 可以拿到实例化对象的那个this            console.log(&#x27;arrow function： 我是&#x27; + this.name + &#x27;, 今年&#x27; + this.age)        &#125;, 1000)    &#125;&#125;let zhangsan = new Student(&#x27;张三&#x27;, 32)zhangsan.sayName()</span><br></pre></td></tr></table></figure><p>之前我们是如何解决this执行问题的呢？</p><ol><li>第一种是将this传给self,再用self来指代this</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sayName() &#123;    let self = this    setTimeout(function () &#123;        // 无法拿到实例化对象的那个this        console.log(&#x27;function： 我是&#x27; + self.name + &#x27;, 今年&#x27; + self.age)    &#125;, 1000)&#125;</span><br></pre></td></tr></table></figure><ol><li>第二种方法是用<code>bind(this)</code>, 即</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sayName() &#123;    setTimeout(function () &#123;        // 无法拿到实例化对象的那个this        console.log(&#x27;function： 我是&#x27; + this.name + &#x27;, 今年&#x27; + this.age)    &#125;.bind(this), 1000)&#125;</span><br></pre></td></tr></table></figure><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>之前的字符串拼接输出都是这样的，非常不方便</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;arrow function： 我是&#x27; + this.name + &#x27;, 今年&#x27; + this.age)</span><br></pre></td></tr></table></figure><p>现在，可以直接这样进行输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(`function： 我是$&#123;this.name&#125;，今年$&#123;this.age&#125;岁了`)</span><br></pre></td></tr></table></figure><p>和python很像有木有，注意是反引号哈</p><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>如果我们要构造一个js对象，它的键和值相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let cat = &#x27;ken&#x27;let dog = &#x27;lili&#x27;let zoo = &#123;cat: cat, dog: dog&#125;console.log(zoo)  //Object &#123;cat: &quot;ken&quot;, dog: &quot;lili&quot;&#125;</span><br></pre></td></tr></table></figure><p>在es6中只需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let cat = &#x27;ken&#x27;let dog = &#x27;lili&#x27;let zoo = &#123;cat, dog&#125;console.log(zoo)  //Object &#123;cat: &quot;ken&quot;, dog: &quot;lili&quot;&#125;</span><br></pre></td></tr></table></figure><p>注意：必须是键和值相同才能用这个方法</p><p>反过来取对象中的值也是如此</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;    name: &#x27;张三&#x27;,    age: 31&#125;let &#123;name, age&#125; = objconsole.log(name, age)  // 张三 31</span><br></pre></td></tr></table></figure><h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p>默认参数很简单，意思就是默认值。大家可以看下面的例子，调用<code>animal()</code>方法时忘了传参数，传统的做法就是加上这一句<code>type = type || &#39;cat&#39;</code> 来指定默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function animal(type)&#123;    type = type || &#x27;cat&#x27;      console.log(type)&#125;animal()</span><br></pre></td></tr></table></figure><p>但是时代变了，es6可以直接指定默认值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function animal(type = &#x27;cat&#x27;) &#123;    console.log(type)&#125;animal()</span><br></pre></td></tr></table></figure><h1 id="多余参数"><a href="#多余参数" class="headerlink" title="多余参数"></a>多余参数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function fun(a, ...type) &#123;    console.log(a, type)  // 1 [ 2, 3, 1 ]&#125;fun(1, 2, 3, 1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用命令部署django项目</title>
      <link href="/archives/1.html"/>
      <url>/archives/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用命令部署django项目"><a href="#使用命令部署django项目" class="headerlink" title="使用命令部署django项目"></a>使用命令部署django项目</h2><p> <em>python</em> <em>Django</em> <em>项目部署</em></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在服务器上，需要准备一些部署必备的工作</p><p>已安装的忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  mysqlnginxpython3</span><br></pre></td></tr></table></figure><h2 id="在本机上的准备工作"><a href="#在本机上的准备工作" class="headerlink" title="在本机上的准备工作"></a>在本机上的准备工作</h2><h3 id="导出第三方模块"><a href="#导出第三方模块" class="headerlink" title="导出第三方模块"></a>导出第三方模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h3 id="收集静态资源"><a href="#收集静态资源" class="headerlink" title="收集静态资源"></a>收集静态资源</h3><p>在django中，如果DEBUG=True，那么django会帮我们完成静态资源的分发</p><p>但是，实际项目上线，我们不需要django为我们进行静态资源分发</p><p>并且DEBUG一定要改为False</p><p>我们使用nginx做静态文件转发</p><p>在django的配置文件中，加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &#x27;/static/&#x27;STATICFILES_DIRS = [    os.path.join(BASE_DIR, &#x27;static&#x27;)]STATIC_ROOT = os.path.join(BASE_DIR, &#x27;feng_static&#x27;)  # 收集的到feng_static目录</span><br></pre></td></tr></table></figure><p>主要是STATIC_ROOT ，然后进行静态文件收集，django就会为我们收集所有的静态文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><p>如果你部署之后发现django后台没有静态文件，那么你肯定是忘了收集静态文件</p><h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p pro_blog &gt; blog.sql</span><br></pre></td></tr></table></figure><h3 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>不会git的去网上找个教程练习一下，git很重要的哦！</p><h1 id="服务器准备"><a href="#服务器准备" class="headerlink" title="服务器准备"></a>服务器准备</h1><h2 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone xxx</span><br></pre></td></tr></table></figure><h2 id="创建python虚拟环境"><a href="#创建python虚拟环境" class="headerlink" title="创建python虚拟环境"></a>创建python虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 安装虚拟环境的第三方包 virtualenvpip3 install virtualenv# 创建虚拟环境（虚拟环境一般放在项目根目录下）virtualenv fengfeng_blog_env# 激活虚拟环境source fengfeng_blog_env/bin/activate# 退出虚拟环境deactivate</span><br></pre></td></tr></table></figure><h2 id="下载三方模块"><a href="#下载三方模块" class="headerlink" title="下载三方模块"></a>下载三方模块</h2><p>在虚拟环境中导入requirements中的第三方模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在服务器中创建一个数据库create database fengfeng_blog;use fengfeng_blog# 导入数据source  blog.sql# mysql创建用户create user &#x27;fengfeng_blog&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;# 授权GRANT ALL ON fengfeng_blog.* TO &#x27;fengfeng_blog&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p>最后再看看配置文件中的数据库配置这些是否正确</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>先把DEBUG改为True</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>然后访问服务器的ip:8000看看能不能出来效果</p><p>如果不能出来，看看是不是防火墙没关</p><p>这一步的操作是为了查看项目能不能正常运行</p><h1 id="uwsgi配置"><a href="#uwsgi配置" class="headerlink" title="uwsgi配置"></a>uwsgi配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 先安装pip install uwsgi</span><br></pre></td></tr></table></figure><p>在我们通过Django创建django项目时，在子目录app01下已经帮我们生成的 wsgi.py文件。所以，我们只需要再创建uwsgi.ini配置文件即可，当然，uwsgi支持多种类型的配置文件，如xml，ini等。此处，使用ini类型的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]# 开启主进程master = true# 指定uwsgi工作的进程数processes = 1# 指定工作的每个进程下的线程数threads = 2# 指定项目的目录chdir = /www/wwwroot/fengfeng-blog# wsgi.py文件的位置wsgi-file= %(chdir)/Fengfengblog/wsgi.py# 使用nginx这里就要用socketsocket = 127.0.0.1:8000# 日志  需要去创建这个文件logto = %(chdir)/logs/error.logchmod-socket = 660vacuum = truemax-requests = 1000# uwsgi的运行状态stats=%(chdir)/uwsgi.status# uwsgi的进程idpidfile=%(chdir)/uwsgi.pid</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --stop uwsgi.pid# 或者pkill -f uwsgi -9</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --reload uwsgi.pid</span><br></pre></td></tr></table></figure><p>注意查看uwsgi的启动信息，如果有错，就要检查配置文件的参数是否设置有误。</p><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><p>再接下来要做的就是修改nginx.conf配置文件。打开/etc/nginx/nginx.conf文件，添加如下内容。</p><p>注意哦，需要去对应的域名控制台做域名解析，解析到当前的服务器</p><p><img src="http://python.fengfengzhidao.com/pic/20220604211047.png" alt="img"></p><p>nginx做静态文件转发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nginx配置server &#123;    listen   80;    server_name xxx.fengfengzhidao.com;    location / &#123;        uwsgi_pass   127.0.0.1:8000;  # uwsgi运行的端口        include uwsgi_params;    &#125;    location /static&#123;      alias  /www/wwwroot/fengfeng-blog/static;  # 你收集的静态文件的位置    &#125;&#125;</span><br></pre></td></tr></table></figure><p>重启一下nginx，去访问客户机的ip，正常加载说明成功！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown的基本使用</title>
      <link href="/archives/2e726327.html"/>
      <url>/archives/2e726327.html</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown基础"><a href="#MarkDown基础" class="headerlink" title="MarkDown基础"></a>MarkDown基础</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 标题名字（井号的个数代表标题的级数）</span></span><br></pre></td></tr></table></figure><h1 id="一级标题使用1个"><a href="#一级标题使用1个" class="headerlink" title="一级标题使用1个#"></a>一级标题使用1个#</h1><h2 id="二级标题使用2个"><a href="#二级标题使用2个" class="headerlink" title="二级标题使用2个#"></a>二级标题使用2个#</h2><h3 id="三级标题使用3个"><a href="#三级标题使用3个" class="headerlink" title="三级标题使用3个#"></a>三级标题使用3个#</h3><h4 id="四级标题使4用个"><a href="#四级标题使4用个" class="headerlink" title="四级标题使4用个#"></a>四级标题使4用个#</h4><h5 id="五级标题使用5个"><a href="#五级标题使用5个" class="headerlink" title="五级标题使用5个#"></a>五级标题使用5个#</h5><h6 id="六级标题使用6个"><a href="#六级标题使用6个" class="headerlink" title="六级标题使用6个#"></a>六级标题使用6个#</h6><p>####### 最多支持六级标题#</p><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是 ~~删除线~~ (使用波浪号)</span><br></pre></td></tr></table></figure><p>这就是 <del>删除线</del> (使用波浪号)</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*斜体*</span> 的 <span class="emphasis">_文本_</span></span><br></pre></td></tr></table></figure><p>这是用来 <em>斜体</em> 的 <em>文本</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**加粗**</span> 的 <span class="strong">__文本__</span></span><br></pre></td></tr></table></figure><p>这是用来 <strong>加粗</strong> 的 <strong>文本</strong></p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**<span class="emphasis">*斜体+加粗*</span>**</span> 的 <span class="strong">__<span class="emphasis">_文本_</span>__</span></span><br></pre></td></tr></table></figure><p>这是用来 <em><strong>斜体+加粗</strong></em> 的 <em><strong>文本</strong></em></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线(快捷键<code>command</code>+<code>u</code>，视频中所有的快捷键都是针对Mac系统，其他系统可自行查找)</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 ==斜体+加粗== 的文本</span><br></pre></td></tr></table></figure><p>这是用来 ==斜体+加粗== 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">水 H~2~O </span><br><span class="line">双氧水 H~2~O~2~ </span><br></pre></td></tr></table></figure><p>水 H<del>2</del>O </p><p>双氧水 H<del>2</del>O<del>2</del></p><h3 id="上标（需勾选扩展语法）"><a href="#上标（需勾选扩展语法）" class="headerlink" title="上标（需勾选扩展语法）"></a>上标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积 m^2^ </span><br><span class="line">体积 m^3^</span><br></pre></td></tr></table></figure><p>面积 m^2^<br>体积 m^3^</p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p> Emoji 支持表情符号，你可以用系统默认的 Emoji 符号（ Windows 用户不一定支持，自己试下~）。 也可以用图片的表情，输入 <code>:</code> 将会出现智能提示。  </p><h4 id="一些表情例子"><a href="#一些表情例子" class="headerlink" title="一些表情例子"></a>一些表情例子</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:smile: :laughing: :dizzy<span class="emphasis">_face: :sob: :cold_</span>sweat: :sweat<span class="emphasis">_smile:  :cry: :triumph: :heart_</span>eyes: :relaxed: :sunglasses: :weary:</span><br><span class="line"></span><br><span class="line">:+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat<span class="emphasis">_drops: :hankey: :exclamation: :anger:</span></span><br><span class="line"><span class="emphasis"></span></span><br></pre></td></tr></table></figure><p>:smile: :laughing: :dizzy_face: :sob: :cold_sweat: :sweat_smile:  :cry: :triumph: :heart_eyes: :relaxed: :sunglasses: :weary: :+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat_drops: :hankey: :exclamation: :anger:</p><p>(  Mac: <code>control</code>+<code>command</code>+<code>space</code>点选)</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name | price</span><br><span class="line">--- | ---</span><br><span class="line">fried chicken | 19</span><br><span class="line">cola|5</span><br></pre></td></tr></table></figure><blockquote><p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p></blockquote><table><thead><tr><th>name</th><th>price</th></tr></thead><tbody><tr><td>fried chicken</td><td>19</td></tr><tr><td>cola</td><td>5</td></tr></tbody></table><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界，在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|    name       | price |</span><br><span class="line">| :------------ | :---: |</span><br><span class="line">| fried chicken | 19    |</span><br><span class="line">| cola          |  32   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">name</th><th align="center">price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td align="center">19</td></tr><tr><td align="left">cola</td><td align="center">32</td></tr></tbody></table><p>使用快捷键<code>command</code>+<code>opt</code>+<code>T</code>更方便(段落→表格→插入表格，即可查看快捷键)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;“后悔创业”</span><br></pre></td></tr></table></figure><blockquote><p>“后悔创业”</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></table></figure><blockquote><p>也可以在引用中</p><blockquote><p>使用嵌套的引用</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表–符号-空格"><a href="#无序列表–符号-空格" class="headerlink" title="无序列表–符号 空格"></a>无序列表–符号 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 可以使用 <span class="code">`*`</span> 作为标记</span><br><span class="line"><span class="bullet">+</span> 也可以使用 <span class="code">`+`</span></span><br><span class="line"><span class="bullet">-</span> 或者 <span class="code">`-`</span></span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>*</code> 作为标记</li></ul><ul><li>也可以使用 <code>+</code></li></ul><ul><li>或者 <code>-</code></li></ul><h3 id="有序列表–数字-空格"><a href="#有序列表–数字-空格" class="headerlink" title="有序列表–数字 . 空格"></a>有序列表–数字 <code>.</code> 空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表以数字和 <span class="code">`.`</span> 开始；</span><br><span class="line"><span class="bullet">3.</span> 数字的序列并不会影响生成的列表序列；</span><br><span class="line"><span class="bullet">4.</span> 但仍然推荐按照自然顺序（1.2.3...）编写。</span><br></pre></td></tr></table></figure><ol><li><p>有序列表以数字和 <code>.</code> 开始；</p></li><li><p>数字的序列并不会影响生成的列表序列；</p></li><li><p>但仍然推荐按照自然顺序（1.2.3…）编写。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用：数字\. 来取消显示为列表（用反斜杠进行转义）</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```语言名称</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">也可以通过 <span class="code">``，插入行内代码（`</span> 是 <span class="code">`Tab`</span> 键上边、数字 <span class="code">`1`</span> 键左侧的那个按键）：</span><br><span class="line"></span><br><span class="line">例如 <span class="code">`Markdown`</span></span><br></pre></td></tr></table></figure><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本（包括 Markdown 语法）都会显示为原始内容</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（``）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">------</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">___</span></span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转–超链接"><a href="#外部跳转–超链接" class="headerlink" title="外部跳转–超链接"></a>外部跳转–超链接</h3><p>格式为 <code>[link text](link)</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">帮助文档</span>](<span class="link">https://support.typora.io/Links/#faq</span>)</span><br></pre></td></tr></table></figure><p><a href="https://support.typora.io/Links/#faq">帮助文档</a></p><h3 id="内部跳转–本文件内跳（Typora支持）"><a href="#内部跳转–本文件内跳（Typora支持）" class="headerlink" title="内部跳转–本文件内跳（Typora支持）"></a>内部跳转–本文件内跳（Typora支持）</h3><p>格式为 <code>[link text](#要去的目的地--标题）</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我想跳转</span>](<span class="link">#饼图（Pie）</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Open Links in Typora</p><p>You can use <code>command+click</code> (macOS), or <code>ctrl+click</code> (Linux/Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps.</p></blockquote><p><a href="#%E9%A5%BC%E5%9B%BE%EF%BC%88Pie%EF%BC%89">我想跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;123@email.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><a href="mailto:123@email.com">123@email.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">自己起的图片名字</span>](<span class="link">图片地址或者图片本地存储的路径</span>)</span><br></pre></td></tr></table></figure><h3 id="网上的图片"><a href="#网上的图片" class="headerlink" title="网上的图片"></a>网上的图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">friedChicken</span>](<span class="link">https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1580814517&amp;di=2630beac440e5dab0e44c7286a3b2b61&amp;src=http://imgsrc.baidu.com/forum/w=580/sign=12c730c4ff03738dde4a0c2a831ab073/9497794f9258d1091818e6d6d858ccbf6d814d1b.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="利用Markdown画图（需勾选扩展语法）"><a href="#利用Markdown画图（需勾选扩展语法）" class="headerlink" title="利用Markdown画图（需勾选扩展语法）"></a>利用Markdown画图（需勾选扩展语法）</h2><p>markdown画图也是轻量级的，功能并不全。</p><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码。</p><p>（不同的编辑器渲染的可能不一样）</p><h3 id="流程图-graph"><a href="#流程图-graph" class="headerlink" title="流程图(graph)"></a>流程图(graph)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph 方向描述</span><br><span class="line"><span class="code">    图表中的其他语句...</span></span><br></pre></td></tr></table></figure><p>关键字graph表示一个流程图的开始，同时需要指定该图的方向。</p><p>其中“方向描述”为：</p><table><thead><tr><th align="left">用词</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">TB</td><td align="left">从上到下</td></tr><tr><td align="left">BT</td><td align="left">从下到上</td></tr><tr><td align="left">RL</td><td align="left">从右到左</td></tr><tr><td align="left">LR</td><td align="left">从左到右</td></tr></tbody></table><blockquote><p>T = TOP，B = BOTTOM，L = LEFT，R = RIGHT，D = DOWN</p></blockquote><p>最常用的布局方向是TB、LR。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">  A--&gt;B</span><br><span class="line">  B--&gt;C</span><br><span class="line">  C--&gt;A</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">  A--&gt;B</span><br><span class="line">  B--&gt;C</span><br><span class="line">  C--&gt;A</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  A--&gt;B</span><br><span class="line">  B--&gt;C</span><br><span class="line">  C--&gt;A</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  A--&gt;B</span><br><span class="line">  B--&gt;C</span><br><span class="line">  C--&gt;A</span><br></pre></td></tr></table></figure><h4 id="流程图常用符号及含义"><a href="#流程图常用符号及含义" class="headerlink" title="流程图常用符号及含义"></a>流程图常用符号及含义</h4><h5 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h5><table><thead><tr><th align="left">表述</th><th align="left">说明</th><th>含义</th></tr></thead><tbody><tr><td align="left">id[文字]</td><td align="left">矩形节点</td><td>表示过程，也就是整个流程中的一个环节</td></tr><tr><td align="left">id(文字)</td><td align="left">圆角矩形节点</td><td>表示开始和结束</td></tr><tr><td align="left">id((文字))</td><td align="left">圆形节点</td><td>表示连接。为避免流程过长或有交叉，可将流程切开。成对</td></tr><tr><td align="left">id{文字}</td><td align="left">菱形节点</td><td>表示判断、决策</td></tr><tr><td align="left">id&gt;文字]</td><td align="left">右向旗帜状节点</td><td></td></tr></tbody></table><p><strong>单向箭头线段</strong>：表示流程进行方向</p><blockquote><p>id即为节点的唯一标识，A~F 是当前节点名字，类似于变量名，画图时便于引用</p><p>括号内是节点中要显示的文字，默认节点的名字和显示的文字都为A</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A</span><br><span class="line">  B(圆角矩形节点)</span><br><span class="line">  C[矩形节点]</span><br><span class="line">  D((圆形节点))</span><br><span class="line">  E&#123;菱形节点&#125;</span><br><span class="line">  F&gt;右向旗帜状节点] </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A</span><br><span class="line">  B(圆角矩形节点)</span><br><span class="line">  C[矩形节点]</span><br><span class="line">  D((圆形节点))</span><br><span class="line">  E&#123;菱形节点&#125;</span><br><span class="line">  F&gt;右向旗帜状节点]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">    begin(出门)--&gt; buy[买炸鸡]</span></span><br><span class="line"><span class="code">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span></span><br><span class="line"><span class="code">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)</span></span><br><span class="line"><span class="code">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</span></span><br><span class="line"><span class="code">    </span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    begin(出门)--&gt; buy[买炸鸡]</span><br><span class="line">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><br><span class="line">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)</span><br><span class="line">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A1--&gt;B1</span><br><span class="line">  A2---B2</span><br><span class="line">  A3--text---B3</span><br><span class="line">  A4--text--&gt;B4</span><br><span class="line">  A5-.-B5</span><br><span class="line">  A6-.-&gt;B6</span><br><span class="line">  A7-.text.-B7</span><br><span class="line">  A8-.text.-&gt;B8</span><br><span class="line">  A9===B9</span><br><span class="line">  A10==&gt;B10</span><br><span class="line">  A11==text===B11</span><br><span class="line">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A1--&gt;B1</span><br><span class="line">  A2---B2</span><br><span class="line">  A3--text---B3</span><br><span class="line">  A4--text--&gt;B4</span><br><span class="line">  A5-.-B5</span><br><span class="line">  A6-.-&gt;B6</span><br><span class="line">  A7-.text.-B7</span><br><span class="line">  A8-.text.-&gt;B8</span><br><span class="line">  A9===B9</span><br><span class="line">  A10==&gt;B10</span><br><span class="line">  A11==text===B11</span><br><span class="line">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"> A ---B</span><br></pre></td></tr></table></figure><h5 id="子图表"><a href="#子图表" class="headerlink" title="子图表"></a>子图表</h5><p>使用以下语法添加子图表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph 子图表名称</span><br><span class="line"><span class="code">    子图表中的描述语句...</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">  subgraph 买炸鸡前</span></span><br><span class="line"><span class="code">    begin(出门)--&gt; buy[出门买炸鸡]</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span></span><br><span class="line"><span class="code">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)</span></span><br><span class="line"><span class="code">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  subgraph 买炸鸡前</span><br><span class="line">    begin(出门)--&gt; buy[出门买炸鸡]</span><br><span class="line">    end</span><br><span class="line">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><br><span class="line">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)</span><br><span class="line">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</span><br></pre></td></tr></table></figure><h3 id="序列图-sequence-diagram"><a href="#序列图-sequence-diagram" class="headerlink" title="序列图(sequence diagram)"></a>序列图(sequence diagram)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line"><span class="code">[参与者1][消息线][参与者2]:消息体</span></span><br><span class="line"><span class="code">    ...</span></span><br></pre></td></tr></table></figure><blockquote><p><code>sequenceDiagram</code> 为每幅时序图的固定开头</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">Title: 买炸鸡</span></span><br><span class="line"><span class="code">    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？</span></span><br><span class="line"><span class="code">    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Title: 买炸鸡</span><br><span class="line">    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？</span><br><span class="line">    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参与者（participant）"><a href="#参与者（participant）" class="headerlink" title="参与者（participant）"></a>参与者（participant）</h4><p>传统时序图概念中参与者有角色和类对象之分，但这里我们不做此区分，用参与者表示一切参与交互的事物，可以是人、类对象、系统等形式。中间竖直的线段从上至下表示时间的流逝。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant 参与者 1</span></span><br><span class="line"><span class="code">    participant 参与者 2</span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="code">    participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3</span></span><br></pre></td></tr></table></figure><blockquote><p><code>participant &lt;参与者名称&gt;</code> 声明参与者，语句次序即为参与者横向排列次序。</p></blockquote><h4 id="消息线"><a href="#消息线" class="headerlink" title="消息线"></a>消息线</h4><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-&gt;</td><td align="left">无箭头的实线</td></tr><tr><td align="left">–&gt;</td><td align="left">无箭头的虚线</td></tr><tr><td align="left">-&gt;&gt;</td><td align="left">有箭头的实线（主动发出消息）</td></tr><tr><td align="left">–-&gt;&gt;</td><td align="left">有箭头的虚线（响应）</td></tr><tr><td align="left">-x</td><td align="left">末端为叉的实线（表示异步）</td></tr><tr><td align="left">–x</td><td align="left">末端为叉的虚线（表示异步）</td></tr></tbody></table><h4 id="处理中-激活框"><a href="#处理中-激活框" class="headerlink" title="处理中-激活框"></a>处理中-激活框</h4><p>从消息接收方的时间线上标记一小段时间，表示对消息进行处理的时间间隔。</p><p>在消息线末尾增加 <code>+</code> ，则消息接收者进入当前消息的“处理中”状态；<br>在消息线末尾增加 <code>-</code> ，则消息接收者离开当前消息的“处理中”状态。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant 99 as 救救</span></span><br><span class="line"><span class="code">    participant seller as 炸鸡店小哥</span></span><br><span class="line"><span class="code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; 99: 没有，要现炸。</span></span><br><span class="line"><span class="code">    99 -x +seller:给我炸！</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 99 as 救救</span><br><span class="line">    participant seller as 炸鸡店小哥</span><br><span class="line">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class="line">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class="line">    99 -x +seller:给我炸！</span><br><span class="line">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="注解（note）"><a href="#注解（note）" class="headerlink" title="注解（note）"></a>注解（note）</h4><p>语法如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Note 位置表述 参与者: 标注文字</span><br></pre></td></tr></table></figure><p>其中位置表述可以为</p><table><thead><tr><th align="left">表述</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">right of</td><td align="left">右侧</td></tr><tr><td align="left">left of</td><td align="left">左侧</td></tr><tr><td align="left">over</td><td align="left">在当中，可以横跨多个参与者</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant 99 as 救救</span></span><br><span class="line"><span class="code">    participant seller as 炸鸡店小哥</span></span><br><span class="line"><span class="code">    Note over 99,seller : 热爱炸鸡</span></span><br><span class="line"><span class="code">    Note left of 99 : 女</span></span><br><span class="line"><span class="code">    Note right of seller : 男</span></span><br><span class="line"><span class="code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; 99: 没有，要现炸。</span></span><br><span class="line"><span class="code">    99 -x +seller : 给我炸！</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 99 as 救救</span><br><span class="line">    participant seller as 炸鸡店小哥</span><br><span class="line">    Note over 99,seller : 热爱炸鸡</span><br><span class="line">    Note left of 99 : 女</span><br><span class="line">    Note right of seller : 男</span><br><span class="line">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class="line">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class="line">    99 -x +seller : 给我炸！</span><br><span class="line">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环（loop）"><a href="#循环（loop）" class="headerlink" title="循环（loop）"></a>循环（loop）</h4><p>在条件满足时，重复发出消息序列。（相当于编程语言中的 while 语句。）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant 99 as 救救</span></span><br><span class="line"><span class="code">    participant seller as 炸鸡店小哥</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; 99: 没有，要现炸。</span></span><br><span class="line"><span class="code">    99 -&gt;&gt; +seller:给我炸！</span></span><br><span class="line"><span class="code">    loop 三分钟一次</span></span><br><span class="line"><span class="code">        99 -&gt;&gt; seller : 我的炸鸡好了吗？</span></span><br><span class="line"><span class="code">        seller --&gt;&gt; 99 : 正在炸</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 99 as 救救</span><br><span class="line">    participant seller as 炸鸡店小哥</span><br><span class="line">   </span><br><span class="line">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class="line">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class="line">    99 -&gt;&gt; +seller:给我炸！</span><br><span class="line">    loop 三分钟一次</span><br><span class="line">        99 -&gt;&gt; seller : 我的炸鸡好了吗？</span><br><span class="line">        seller --&gt;&gt; 99 : 正在炸</span><br><span class="line">    end</span><br><span class="line">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br></pre></td></tr></table></figure><h4 id="选择（alt）"><a href="#选择（alt）" class="headerlink" title="选择（alt）"></a>选择（alt）</h4><p>在多个条件中作出判断，每个条件将对应不同的消息序列。（相当于 if 及 else if 语句。）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram    </span><br><span class="line"><span class="code">    participant 99 as 救救</span></span><br><span class="line"><span class="code">    participant seller as 炸鸡店小哥</span></span><br><span class="line"><span class="code">    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？</span></span><br><span class="line"><span class="code">    seller --&gt;&gt; 99 : 可卖的炸鸡数</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    alt 可卖的炸鸡数 &gt; 3</span></span><br><span class="line"><span class="code">        99 -&gt;&gt; seller : 买三只！</span></span><br><span class="line"><span class="code">    else 1 &lt; 可卖的炸鸡数 &lt; 3</span></span><br><span class="line"><span class="code">        99 -&gt;&gt; seller : 有多少买多少</span></span><br><span class="line"><span class="code">    else 可卖的炸鸡数 &lt; 1</span></span><br><span class="line"><span class="code">        99 -&gt;&gt; seller : 那我明天再来</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    seller --&gt;&gt; 99 : 欢迎下次光临</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram    </span><br><span class="line">    participant 99 as 救救</span><br><span class="line">    participant seller as 炸鸡店小哥</span><br><span class="line">    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？</span><br><span class="line">    seller --&gt;&gt; 99 : 可卖的炸鸡数</span><br><span class="line">    </span><br><span class="line">    alt 可卖的炸鸡数 &gt; 3</span><br><span class="line">        99 -&gt;&gt; seller : 买三只！</span><br><span class="line">    else 1 &lt; 可卖的炸鸡数 &lt; 3</span><br><span class="line">        99 -&gt;&gt; seller : 有多少买多少</span><br><span class="line">    else 可卖的炸鸡数 &lt; 1</span><br><span class="line">        99 -&gt;&gt; seller : 那我明天再来</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    seller --&gt;&gt; 99 : 欢迎下次光临</span><br></pre></td></tr></table></figure><h4 id="可选（opt）"><a href="#可选（opt）" class="headerlink" title="可选（opt）"></a>可选（opt）</h4><p>在某条件满足时执行消息序列，否则不执行。相当于单个分支的 if 语句。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant 99 as 救救</span></span><br><span class="line"><span class="code">    participant seller as 炸鸡店小哥</span></span><br><span class="line"><span class="code">    99 -&gt;&gt; seller : 买炸鸡</span></span><br><span class="line"><span class="code">    opt 全都卖完了</span></span><br><span class="line"><span class="code">        seller --&gt;&gt; 99 : 下次再来</span></span><br><span class="line"><span class="code">    end</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 99 as 救救</span><br><span class="line">    participant seller as 炸鸡店小哥</span><br><span class="line">    99 -&gt;&gt; seller : 买炸鸡</span><br><span class="line">    opt 全都卖完了</span><br><span class="line">        seller --&gt;&gt; 99 : 下次再来</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h4 id="并行（Par）"><a href="#并行（Par）" class="headerlink" title="并行（Par）"></a>并行（Par）</h4><p>将消息序列分成多个片段，这些片段并行执行。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">   participant 99 as 救救</span><br><span class="line">   participant seller as 炸鸡店小哥</span><br><span class="line">   </span><br><span class="line"><span class="code">    99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    par 并行执行</span></span><br><span class="line"><span class="code">        seller -&gt;&gt; seller : 装可乐</span></span><br><span class="line"><span class="code">    and</span></span><br><span class="line"><span class="code">        seller -&gt;&gt; seller : 炸炸鸡</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    seller --&gt;&gt; 99 : 您的炸鸡好了！</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">   participant 99 as 救救</span><br><span class="line">   participant seller as 炸鸡店小哥</span><br><span class="line">   </span><br><span class="line">    99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！</span><br><span class="line"></span><br><span class="line">    par 并行执行</span><br><span class="line">        seller -&gt;&gt; seller : 装可乐</span><br><span class="line">    and</span><br><span class="line">        seller -&gt;&gt; seller : 炸炸鸡</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    seller --&gt;&gt; 99 : 您的炸鸡好了！</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://support.typora.io/Draw-Diagrams-With-Markdown/">Typora支持mermaid的官方链接</a></p></blockquote><h3 id="甘特图（gantt）"><a href="#甘特图（gantt）" class="headerlink" title="甘特图（gantt）"></a>甘特图（gantt）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> title 标题</span><br><span class="line">dateFormat 日期格式</span><br><span class="line">section 部分名</span><br><span class="line">任务名:参数一, 参数二, 参数三, 参数四，参数五</span><br><span class="line"></span><br><span class="line"> //参数一：crit（是否重要，红框框） 或者 不填</span><br><span class="line"> //参数二：done（已完成）、active（正在进行） 或者 不填(表示为待完成状态)</span><br><span class="line"> //参数三：取小名 或者 不填</span><br><span class="line"> //参数四：任务开始时间</span><br><span class="line"> //参数五：任务结束时间</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://mermaid-js.github.io/mermaid/#/gantt">官方教程</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">       dateFormat  YYYY-MM-DD</span><br><span class="line">       title Adding GANTT diagram functionality to mermaid</span><br><span class="line"></span><br><span class="line">       section A section</span><br><span class="line">       Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">       Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">       Future task               :         des3, after des2, 5d</span><br><span class="line">       Future task2              :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">       section Critical tasks</span><br><span class="line">       Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">       Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">       Create tests for parser             :crit, active, 3d</span><br><span class="line">       Future task in critical line        :crit, 5d</span><br><span class="line">       Create tests for renderer           :2d</span><br><span class="line">       Add to mermaid                      :1d</span><br><span class="line"></span><br><span class="line">       section Documentation</span><br><span class="line">       Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class="line">       Add gantt diagram to demo page      :after a1  , 20h</span><br><span class="line">       Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">       section Last section</span><br><span class="line">       Describe gantt syntax               :after doc1, 3d</span><br><span class="line">       Add gantt diagram to demo page      :20h</span><br><span class="line">       Add another diagram to demo page    :48h</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">       dateFormat  YYYY-MM-DD</span><br><span class="line">       title Adding GANTT diagram functionality to mermaid</span><br><span class="line"></span><br><span class="line">       section A section</span><br><span class="line">       Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">       Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">       Future task               :         des3, after des2, 5d</span><br><span class="line">       Future task2              :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">       section Critical tasks</span><br><span class="line">       Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">       Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">       Create tests for parser             :crit, active, 3d</span><br><span class="line">       Future task in critical line        :crit, 5d</span><br><span class="line">       Create tests for renderer           :2d</span><br><span class="line">       Add to mermaid                      :1d</span><br><span class="line"></span><br><span class="line">       section Documentation</span><br><span class="line">       Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class="line">       Add gantt diagram to demo page      :after a1  , 20h</span><br><span class="line">       Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">       section Last section</span><br><span class="line">       Describe gantt syntax               :after doc1, 3d</span><br><span class="line">       Add gantt diagram to demo page      :20h</span><br><span class="line">       Add another diagram to demo page    :48h</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 搭建个人博客的基本步骤</title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-搭建个人博客"><a href="#hexo-搭建个人博客" class="headerlink" title="hexo 搭建个人博客"></a>hexo 搭建个人博客</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><ul><li><p><a href="#hexo%E7%9A%84%E5%AE%89%E8%A3%85">hexo的安装</a></p><pre><code>*   *   [1.安装hexo](#1安装hexo)    *   [2.查看是否安装成功](#2查看是否安装成功)    *   [3.到我的博客目录执行初始化文件](#3到我的博客目录执行初始化文件)    *   [4cd到blog目录下安装依赖](#4cd到blog目录下安装依赖)    *   [5运行](#5运行)    *   [6.注意 终端打开的文件目录](#6注意-终端打开的文件目录)</code></pre></li><li><p><a href="#%E5%8F%91%E5%B8%83%E5%88%B0github">发布到gitHub</a></p><ul><li><ul><li><p>  <a href="#1%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE">1.新建一个项目</a></p></li><li><p>  <a href="#2%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0git">2.配置本地git</a></p></li><li><p>  <a href="#3%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6">3.配置本地文件</a></p></li><li><p>  <a href="#4%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2blog%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">4.到我的博客/blog目录下安装插件</a></p></li><li><p>  <a href="#5%E4%B8%8A%E4%BC%A0%E5%AF%86%E4%BB%A4">5.上传密令</a></p></li></ul></li></ul></li></ul></li><li><p><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%AF%86%E4%BB%A4">配置文件以及常用密令</a></p><ul><li><ul><li><ul><li><p><a href="#1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">1.配置文件</a></p><ul><li>  <a href="#2%E5%B8%B8%E7%94%A8%E5%AF%86%E4%BB%A4">2.常用密令</a></li></ul></li></ul></li></ul></li><li><p><a href="#%E4%B8%BB%E9%A2%98%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">主题的安装和使用</a></p><ul><li><ul><li><p>  <a href="#butterfly%E4%B8%BB%E9%A2%98%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">butterfly主题的安装和使用</a></p></li><li><p>  <a href="#%E5%85%B6%E4%BB%96%E4%B8%BB%E9%A2%98%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">其他主题的安装和使用</a></p></li></ul></li><li><p>  <a href="#butterfly%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE">butterfly主题的配置</a></p></li></ul></li><li><p><a href="#git%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">git的版本控制</a></p><ul><li><ul><li><p>  <a href="#%E4%B8%BA%E4%BA%86%E8%83%BD%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%AD%A2%E4%BB%A3%E7%A0%81%E4%B8%A2%E5%A4%B1">为了能进行版本回退以及防止代码丢失</a></p></li><li><p>  <a href="#1%E5%9C%A8github-%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E4%BB%93%E5%BA%93%E7%A7%81%E6%9C%89%E7%9A%84%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E6%BA%90%E7%A0%81">1.在github 上创建一个新仓库，私有的用来存放源码</a></p></li><li><p>  <a href="#2git%E4%B8%8A%E4%BC%A0">2.git上传</a></p></li></ul></li></ul></li></ul></li></ul><h2 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h2><h4 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="2-查看是否安装成功"><a href="#2-查看是否安装成功" class="headerlink" title="2.查看是否安装成功"></a>2.查看是否安装成功</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-到我的博客目录执行初始化文件"><a href="#3-到我的博客目录执行初始化文件" class="headerlink" title="3.到我的博客目录执行初始化文件"></a>3.到我的博客目录执行初始化文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 目录 hexo init blog</span><br></pre></td></tr></table></figure><h4 id="4cd到blog目录下安装依赖"><a href="#4cd到blog目录下安装依赖" class="headerlink" title="4cd到blog目录下安装依赖"></a>4cd到blog目录下安装依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="5运行"><a href="#5运行" class="headerlink" title="5运行"></a>5运行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><h4 id="6-注意-终端打开的文件目录"><a href="#6-注意-终端打开的文件目录" class="headerlink" title="6.注意 终端打开的文件目录"></a>6.注意 终端打开的文件目录</h4><h2 id="发布到gitHub"><a href="#发布到gitHub" class="headerlink" title="发布到gitHub"></a>发布到gitHub</h2><h4 id="1-新建一个项目"><a href="#1-新建一个项目" class="headerlink" title="1.新建一个项目"></a>1.新建一个项目</h4><p><img src="https://cdn.jsdelivr.net/gh/liyu-mm/picgodome/imgimage_3Dxy_v77Jn.png"></p><h4 id="2-配置本地git"><a href="#2-配置本地git" class="headerlink" title="2.配置本地git"></a>2.配置本地git</h4><p><img src="https://cdn.jsdelivr.net/gh/liyu-mm/picgodome/imgimage_yVDXx0lXMX.png"></p><h4 id="3-配置本地文件"><a href="#3-配置本地文件" class="headerlink" title="3.配置本地文件"></a>3.配置本地文件</h4><p><img src="https://cdn.jsdelivr.net/gh/liyu-mm/picgodome/imgimage_QUq6LhgvJ5.png"></p><h4 id="4-到我的博客-blog目录下安装插件"><a href="#4-到我的博客-blog目录下安装插件" class="headerlink" title="4.到我的博客/blog目录下安装插件"></a>4.到我的博客/blog目录下安装插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="5-上传密令"><a href="#5-上传密令" class="headerlink" title="5.上传密令"></a>5.上传密令</h4><p>1.清除缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>2.生成本地文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>3.上传本地</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>4.上传github</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>5访问博客地址</p><p>输入网址 用户名.github.io</p><h1 id="配置文件以及常用密令"><a href="#配置文件以及常用密令" class="headerlink" title="配置文件以及常用密令"></a>配置文件以及常用密令</h1><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h4><p><img src="https://cdn.jsdelivr.net/gh/liyu-mm/picgodome/imgimage_FCjNXJtrCn.png"></p><h4 id="2-常用密令"><a href="#2-常用密令" class="headerlink" title="2.常用密令"></a>2.常用密令</h4><p>1.清除缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>2.生成本地文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>3.上传本地</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>4.上传github</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="主题的安装和使用"><a href="#主题的安装和使用" class="headerlink" title="主题的安装和使用"></a>主题的安装和使用</h2><h4 id="butterfly主题的安装和使用"><a href="#butterfly主题的安装和使用" class="headerlink" title="butterfly主题的安装和使用"></a>butterfly主题的安装和使用</h4><p>1.去github搜索butterfly</p><p>2.找到安装文档</p><p><img src="https://cdn.jsdelivr.net/gh/liyu-mm/picgodome/imgimage_i4Mjc-8kUN.png"></p><p>3.在bong目录下运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>4.改成你的主题名</p><p><img src="https://cdn.jsdelivr.net/gh/liyu-mm/picgodome/imgimage_OY2q_kCvXC.png"></p><h4 id="其他主题的安装和使用"><a href="#其他主题的安装和使用" class="headerlink" title="其他主题的安装和使用"></a>其他主题的安装和使用</h4><p>1.搜索你想要安装的主题</p><p>2.找到安装文档</p><p>3.在bong目录下运行安装文件</p><p>4.theme改成你的主题名</p><h3 id="butterfly主题的配置"><a href="#butterfly主题的配置" class="headerlink" title="butterfly主题的配置"></a>butterfly主题的配置</h3><p>页面主题配置就跟着文档走就OK啦</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><h2 id="git的版本控制"><a href="#git的版本控制" class="headerlink" title="git的版本控制"></a>git的版本控制</h2><h4 id="为了能进行版本回退以及防止代码丢失"><a href="#为了能进行版本回退以及防止代码丢失" class="headerlink" title="为了能进行版本回退以及防止代码丢失"></a>为了能进行版本回退以及防止代码丢失</h4><h4 id="1-在github-上创建一个新仓库，私有的用来存放源码"><a href="#1-在github-上创建一个新仓库，私有的用来存放源码" class="headerlink" title="1.在github 上创建一个新仓库，私有的用来存放源码"></a>1.在github 上创建一个新仓库，私有的用来存放源码</h4><h4 id="2-git上传"><a href="#2-git上传" class="headerlink" title="2.git上传"></a>2.git上传</h4><p>1.现在blog文件夹下面执行 git init 初始化文件</p><p>2.在根目录新建一个文件.gitignore用来忽略上传内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">DS_Store</span></span><br><span class="line"><span class="title class_">Thumbs</span>.<span class="property">db</span></span><br><span class="line">db.<span class="property">json</span></span><br><span class="line">*.<span class="property">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.<span class="property">deploy</span>*/</span><br><span class="line">.<span class="property">vscode</span>/</span><br><span class="line"><span class="regexp">/.idea/</span></span><br><span class="line">.<span class="property">deploy_git</span>*/</span><br><span class="line">.<span class="property">idea</span></span><br><span class="line">themes/butterfly/.<span class="property">git</span></span><br></pre></td></tr></table></figure><p>3.根据github 上的提示上传代码</p><p>4.如果删除恢复代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 代码地址</span><br></pre></td></tr></table></figure><p>安装依赖</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
